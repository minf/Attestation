<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="40:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b536e206020"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b536dfc9130"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b536dfc9130"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b536e1fc280"/></to>
    </wire>
    <wire loc="43:BlinkAppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x2b536e2166d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x2b536e259328"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x2b536e259328"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x2b536e263020"/></to>
    </wire>
    <wire loc="44:BlinkAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2b536e248b80"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2b536e255b58"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2b536e255b58"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2b536e275020"/></to>
    </wire>
    <wire loc="45:BlinkAppC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x2b536e21a020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2b536e26c8e0"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x2b536e26c8e0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2b536e277950"/></to>
    </wire>
    <wire loc="48:BlinkAppC.nc">
      <from><interface-ref name="AttestationResponseSend" scoped="" ref="0x2b536e240590"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2b536e9317a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x2b536e9317a8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2b536ed17020"/></to>
    </wire>
    <wire loc="51:BlinkAppC.nc">
      <from><interface-ref name="AttestationRequestReceive" scoped="" ref="0x2b536e2547a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2b536e9577a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x2b536e9577a8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2b536e2563c8"/>
      <arguments>
        <value cst="I:147">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b536dfc8580"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e6fc300"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b536dfc8580"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e6d0b40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b536dfc8580"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536ec4e408"/></to>
    </wire>
    <wire loc="77:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b536dfc8580"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e2fc898"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b536dfc8580"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e4a21e8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b536e1fc8b8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b536ded55c8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b536ded55c8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b536df81020"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b536e1fb398"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536dfbd580"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b536dfbd580"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536dfcc020"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b536e1fba60"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x2b536dfc8580"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b536dfc5148"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e550980"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b536dfce430"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b536e1da708"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x2b536dfccd88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e1da0d8"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2b536dfcc6c0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfc4680"/></to>
    </wire>
    <wire loc="23:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfc4680"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfd1c78"/></to>
    </wire>
    <wire loc="24:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfc4680"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfec358"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b536dfc4d10"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b536dfc5148"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfec358"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b536e025700"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfec358"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b536e057140"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x2b536dfdb020"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x2b536e089af0"/></to>
    </wire>
    <wire loc="132:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x2b536e089af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b536e109430"/></to>
    </wire>
    <wire loc="27:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b536dfda198"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b536dfc4d10"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="CHP_OUT" scoped="" ref="0x2b536e038c28"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x2b536e087e00"/></to>
    </wire>
    <wire loc="134:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x2b536e087e00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b536e107740"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PALE" scoped="" ref="0x2b536e031df0"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x2b536e09d7e0"/></to>
    </wire>
    <wire loc="159:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x2b536e09d7e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b536e137430"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PCLK" scoped="" ref="0x2b536e037020"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x2b536e09baf0"/></to>
    </wire>
    <wire loc="161:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x2b536e09baf0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b536e134740"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PDATA" scoped="" ref="0x2b536e036198"/></from>
      <to><interface-ref name="PortD7" scoped="" ref="0x2b536e09ac78"/></to>
    </wire>
    <wire loc="162:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x2b536e09ac78"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b536e1338c8"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiSck" scoped="" ref="0x2b536e0569e8"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x2b536e083348"/></to>
    </wire>
    <wire loc="138:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x2b536e083348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b536e110a50"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMiso" scoped="" ref="0x2b536e055c80"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x2b536e091658"/></to>
    </wire>
    <wire loc="140:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x2b536e091658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b536e10ed60"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMosi" scoped="" ref="0x2b536e05de08"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x2b536e0824d0"/></to>
    </wire>
    <wire loc="139:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x2b536e0824d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b536e10fbd8"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="OC1C" scoped="" ref="0x2b536e05b020"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x2b536e08ce00"/></to>
    </wire>
    <wire loc="144:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x2b536e08ce00"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b536e11b2a8"/></to>
    </wire>
    <wire loc="182:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x2b536e0b67e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e188970"/></to>
    </wire>
    <wire loc="156:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x2b536e0a0348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b536e128020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b536e128020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea94970"/></to>
    </wire>
    <wire loc="167:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x2b536e0a5348"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b536e13cd60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b536e13cd60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb13970"/></to>
    </wire>
    <wire loc="176:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x2b536e0ab020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b536e1555b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b536e1555b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb64970"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b536e107740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e984100"/></to>
    </wire>
    <wire loc="174:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x2b536e0aec78"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b536e1432a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b536e1432a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb6a970"/></to>
    </wire>
    <wire loc="137:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x2b536e0841a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b536e112930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b536e112930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e9d6448"/></to>
    </wire>
    <wire loc="148:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x2b536e098348"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b536e124740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b536e124740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea49710"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b536e137430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eac3970"/></to>
    </wire>
    <wire loc="170:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x2b536e0b17e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b536e138120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b536e138120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb0a970"/></to>
    </wire>
    <wire loc="129:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x2b536e07c658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b536e0fb020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b536e0fb020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e994100"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b536e10ed60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea03480"/></to>
    </wire>
    <wire loc="151:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x2b536e0957e0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b536e121bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b536e121bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea40710"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b536e1338c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eaba970"/></to>
    </wire>
    <wire loc="179:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x2b536e0b84d0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b536e152a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b536e152a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb5b970"/></to>
    </wire>
    <wire loc="185:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x2b536e0b21a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e1a1020"/></to>
    </wire>
    <wire loc="165:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x2b536e0a7020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b536e13fa50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b536e13fa50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb19970"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b536e109430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e98b100"/></to>
    </wire>
    <wire loc="143:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x2b536e08dc78"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b536e11c120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b536e11c120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e9fa480"/></to>
    </wire>
    <wire loc="183:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x2b536e0b5e00"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e197ab0"/></to>
    </wire>
    <wire loc="146:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x2b536e08a020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b536e114500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b536e114500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea4f6a8"/></to>
    </wire>
    <wire loc="157:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x2b536e09f4d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b536e127120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b536e127120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea91970"/></to>
    </wire>
    <wire loc="168:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x2b536e0a44d0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b536e13be18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b536e13be18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb10970"/></to>
    </wire>
    <wire loc="177:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x2b536e0aa1a0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b536e154740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b536e154740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb61970"/></to>
    </wire>
    <wire loc="135:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x2b536e085020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b536e1068c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b536e1068c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e9b5100"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b536e110a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e9d3480"/></to>
    </wire>
    <wire loc="149:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x2b536e0974d0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b536e1238c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b536e1238c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea46710"/></to>
    </wire>
    <wire loc="160:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x2b536e09c968"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b536e1365b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b536e1365b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eac0970"/></to>
    </wire>
    <wire loc="171:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x2b536e0b0968"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b536e14b2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b536e14b2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb07970"/></to>
    </wire>
    <wire loc="130:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x2b536e07b7e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b536e0fa120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b536e0fa120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e991100"/></to>
    </wire>
    <wire loc="141:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x2b536e0907e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b536e10de18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b536e10de18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea00480"/></to>
    </wire>
    <wire loc="152:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x2b536e094968"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b536e120d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b536e120d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea3d710"/></to>
    </wire>
    <wire loc="180:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x2b536e0b7658"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b536e151bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b536e151bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb94970"/></to>
    </wire>
    <wire loc="155:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x2b536e092c78"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b536e12ae40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b536e12ae40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea97970"/></to>
    </wire>
    <wire loc="166:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x2b536e0a61a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b536e13ebd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b536e13ebd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb16970"/></to>
    </wire>
    <wire loc="175:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x2b536e0ade00"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b536e142430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b536e142430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb67970"/></to>
    </wire>
    <wire loc="186:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x2b536e0c2348"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e19c180"/></to>
    </wire>
    <wire loc="133:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x2b536e088c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b536e1085b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b536e1085b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e988100"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b536e11b2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e9f6480"/></to>
    </wire>
    <wire loc="173:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x2b536e0afaf0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b536e1441e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b536e1441e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb6d970"/></to>
    </wire>
    <wire loc="147:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x2b536e0991a0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b536e1255b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b536e1255b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea4c710"/></to>
    </wire>
    <wire loc="158:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x2b536e09e658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b536e1262a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b536e1262a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eac6970"/></to>
    </wire>
    <wire loc="169:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x2b536e0a2658"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b536e139020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b536e139020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb0d970"/></to>
    </wire>
    <wire loc="178:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x2b536e0b9348"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b536e1538c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b536e1538c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb5e970"/></to>
    </wire>
    <wire loc="128:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x2b536e07d3f0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b536e0fddc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b536e0fddc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e997100"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b536e10fbd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea06480"/></to>
    </wire>
    <wire loc="150:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x2b536e096658"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b536e122a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b536e122a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea43710"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b536e134740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eabd970"/></to>
    </wire>
    <wire loc="184:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x2b536e0b3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e193c38"/></to>
    </wire>
    <wire loc="164:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x2b536e0a9e00"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b536e140930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b536e140930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536eb1c970"/></to>
    </wire>
    <wire loc="153:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x2b536e093af0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b536e11fe18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b536e11fe18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536ea71710"/></to>
    </wire>
    <wire loc="131:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x2b536e07a968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b536e0f92a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b536e0f92a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e98e100"/></to>
    </wire>
    <wire loc="142:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x2b536e08faf0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b536e10b020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b536e10b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b536e9fd480"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536df81e58"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2b536df88328"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2b536dfa0020"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x2b536dfa7c10"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x2b536e7a2e18"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x2b536e263020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x2b536e272640"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x2b536e2582b0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2b536e262020"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x2b536e262020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2b536e271570"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x2b536e255270"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x2b536e277050"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x2b536e277050"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x2b536e26f628"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2b536e275020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2b536e2c7638"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x2b536e2563c8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2b536e2611c8"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x2b536e2611c8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2b536e2707a0"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e265a08"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e275cb8"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e275cb8"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e2d6ac8"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x2b536e277950"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2b536e26d020"/></to>
    </wire>
    <wire loc="80:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x2b536e272640"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x2b536e2fb020"/></to>
    </wire>
    <wire loc="83:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2b536e2c7638"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2b536e3b62a8"/></to>
    </wire>
    <wire loc="89:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e2d6ac8"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e3d27e0"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x2b536e27eb40"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x2b536e2c80c0"/></to>
    </wire>
    <wire loc="81:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x2b536e2c80c0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x2b536e3b84d8"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x2b536e283978"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2b536e2c8cc0"/></to>
    </wire>
    <wire loc="82:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x2b536e2c8cc0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2b536e3b7108"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x2b536e27c360"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x2b536e8a4cd8"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2b536e282328"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2b536e2c7638"/></to>
    </wire>
    <wire loc="87:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x2b536e2e6a60"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x2b536e2faaa8"/></to>
    </wire>
    <wire loc="85:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaControl" scoped="" ref="0x2b536e2c3760"/></from>
      <to><interface-ref name="CsmaControl" scoped="" ref="0x2b536e2fbac0"/></to>
    </wire>
    <wire loc="86:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaBackoff" scoped="" ref="0x2b536e2da9e0"/></from>
      <to><interface-ref name="CsmaBackoff" scoped="" ref="0x2b536e2fa2d8"/></to>
    </wire>
    <wire loc="88:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RadioTimeStamping" scoped="" ref="0x2b536e2d62c8"/></from>
      <to><interface-ref name="RadioTimeStamping" scoped="" ref="0x2b536e3b7a60"/></to>
    </wire>
    <wire loc="91:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x2b536e3143b0"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x2b536e47d7a8"/></to>
    </wire>
    <wire loc="92:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x2b536e328ae8"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x2b536e6d1a50"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x2b536e6d1a50"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x2b536e6ca5e8"/></to>
    </wire>
    <wire loc="93:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Squelch" scoped="" ref="0x2b536e311cb0"/></from>
      <to><interface-ref name="CC1000Squelch" scoped="" ref="0x2b536e4a2808"/></to>
    </wire>
    <wire loc="94:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="WakeupTimer" scoped="" ref="0x2b536e31e818"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b536e6db128"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2b536e6db128"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2b536e6da9a8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadio" scoped="" ref="0x2b536e305578"/></from>
      <to><interface-ref name="ByteRadio" scoped="" ref="0x2b536e3b5020"/></to>
    </wire>
    <wire loc="96:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioInit" scoped="" ref="0x2b536e2f8060"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e3bb760"/></to>
    </wire>
    <wire loc="97:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioControl" scoped="" ref="0x2b536e2f7020"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x2b536e3bbd60"/></to>
    </wire>
    <wire loc="99:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x2b536e3d11e8"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x2b536e47d7a8"/></to>
    </wire>
    <wire loc="100:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x2b536e3d0b90"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x2b536e52d908"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x2b536e52d908"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x2b536e05e630"/></to>
    </wire>
    <wire loc="101:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x2b536e3cdb10"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x2b536e8a4cd8"/></to>
    </wire>
    <wire loc="102:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiRx" scoped="" ref="0x2b536e3ce100"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x2b536e47c050"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="104:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiNoiseFloor" scoped="" ref="0x2b536e32d878"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x2b536e47c050"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="105:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiCheckChannel" scoped="" ref="0x2b536e330168"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x2b536e47c050"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiPulseCheck" scoped="" ref="0x2b536e32c9c8"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x2b536e47c050"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="107:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="cancelRssi" scoped="" ref="0x2b536e3443e0"/></from>
      <to><function-ref name="cancel" scoped="" ref="0x2b536e49b9e8"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x2b536e334348"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x2b536e8a5838"/></to>
    </wire>
    <wire loc="110:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ActualRssi" scoped="" ref="0x2b536e49ae28"/></from>
      <to><interface-ref name="RssiAdc" scoped="" ref="0x2b536e5304e0"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiAdc" scoped="" ref="0x2b536e5304e0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2b536e6b0128"/></to>
    </wire>
    <wire loc="111:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b536e49a020"/></from>
      <to><interface-ref name="RssiResource" scoped="" ref="0x2b536e52fb80"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x2b536e52fb80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b536e6b1438"/></to>
    </wire>
    <wire loc="112:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC" scoped="" ref="0x2b536e4ad318"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x2b536e52cbf8"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000" scoped="" ref="0x2b536e52cbf8"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x2b536e02d7e8"/></to>
    </wire>
    <wire loc="113:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x2b536e4ac080"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x2b536e8a5838"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="setWakeupTask" scoped="" ref="0x2b536e340de8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="startStopDone" scoped="" ref="0x2b536e3451c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="293:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="sleepCheck" scoped="" ref="0x2b536e36a5c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="adjustSquelch" scoped="" ref="0x2b536e365b60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="376:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketSent" scoped="" ref="0x2b536e429bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="547:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketReceived" scoped="" ref="0x2b536e455908"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ReadNow" scoped="" ref="0x2b536e6b0128"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2b536e53e620"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b536e6b1438"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b536e537af0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b536e6af748"/></from>
      <to><interface-ref name="RssiConfig" scoped="" ref="0x2b536e0381f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b536e539208"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b536e6af748"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536e554890"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536e6ae020"/></to>
    </wire>
    <wire loc="30:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b536e53ca00"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b536e6aa020"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x2b536e53e620"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2b536e681c38"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b536e6b7020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b536e538050"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b536e67d208"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b536e539208"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x2b536e6ba860"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b536e682020"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b536e67e358"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b536e551cb8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b536e551cb8"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b536e547080"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b536e54b9b0"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b536e5479d8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b536e537af0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b536e658840"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b536e658840"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b536ec4bbb8"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536e6543c8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536e554890"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b536e55a888"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b536e594020"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b536e594020"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b536e592db8"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b536e566d30"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b536dfce430"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b536e652c30"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b536e544860"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536e651988"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536e657dd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536e657dd8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536ec49268"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2b536e58d330"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2b536dfa8480"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2b536e657698"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2b536ec4a9a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b536e6569d8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b536ec49e20"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536ec486f8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536e6543c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2b536ec48e78"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b536ec4e9e0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2b536ec45020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b536ec98958"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b536e652c30"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b536ec970e0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b536e6513f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536ec97678"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536e651988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b536ec96268"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b536e663578"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x2b536e6940c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x2b536e6ca5e8"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x2b536e6c4100"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x2b536e6cf980"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x2b536e6cb528"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x2b536e6cb528"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x2b536e6c6020"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b536e531c50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e6d0b40"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b536e6d0b40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e6c96c0"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2b536e6da9a8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2b536e6fa020"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2b536e6fa020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b536e86c0c8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b536e6fc300"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e6f1b88"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x2b536e6f2590"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x2b536e88e7f8"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b536e6f1b88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536e7fa1f0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x2b536e8665a0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b536e829ab0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x2b536e824c70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x2b536e710748"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x2b536e710748"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2b536e7fa998"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2b536e88d9d0"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x2b536e7087b8"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x2b536e7087b8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b536e7f6a90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x2b536e7f6a90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b536ecbdce0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x2b536e7fa1f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b536ec7e438"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x2b536e7fa998"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2b536ec7ebe0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2b536ecba020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b536e791de8"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2b536e791de8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b536e783cf8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2b536ecb6e70"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2b536e789020"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2b536e789020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2b536e7a7d20"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x2b536ecb4d20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2b536e788020"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x2b536e788020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2b536e7a6d10"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerAsync" scoped="" ref="0x2b536ecb1db0"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x2b536e784228"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x2b536e784228"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x2b536e7a1558"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x2b536e820cf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x2b536e891618"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x2b536e9303f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2b536e255b58"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x2b536e92f020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2b536e26c8e0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x2b536e92e5b8"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e265a08"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x2b536ed17c38"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x2b536e8eeb88"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x2b536ed16888"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2b536e26c8e0"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x2b536e8eeb88"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x2b536e93e660"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x2b536e93d3e8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2b536e2582b0"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x2b536e93c020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2b536e26c8e0"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2b536e93b578"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2b536e255b58"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x2b536e93a2e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x2b536e93aa88"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x2b536e956080"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2b536e255b58"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x2b536e956c38"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2b536e26c8e0"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="45:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <documentation loc="34:/opt/tinyos-2.0.2/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000InitP" loc="36:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
        <short>&#10; Hardware initialisation for the CC1000 radio.</short>
        <long>&#10; Hardware initialisation for the CC1000 radio. This component is always&#10; included even if the radio is not used.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000P" loc="41:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <module/>
    </component>
    <component qname="HplCC1000SpiP" loc="40:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
        <short>&#10; Low-level functions to access the CC1000 bus.</short>
        <long>&#10; Low-level functions to access the CC1000 bus. Built using the mica2&#10; hardware SPI.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/opt/tinyos-2.0.2/tos/platforms/mica/MeasureClockC.nc">
      <documentation loc="14:/opt/tinyos-2.0.2/tos/platforms/mica/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="45:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <documentation loc="38:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="35:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="43:/opt/tinyos-2.0.2/tos/system/SchedulerBasicP.nc">
      <module/>
    </component>
    <component qname="McuSleepC" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
      <documentation loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.8 2007/04/08 01:17:12 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkC" loc="34:BlinkC.nc">
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="46:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <documentation loc="38:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
        <short>&#10; The Active Message layer on the mica2 platform.</short>
        <long>&#10; The Active Message layer on the mica2 platform. This is a naming wrapper&#10; around the CC1000 Active Message layer.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageC" loc="44:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <documentation loc="32:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer for the CC1000 radio.</short>
        <long>&#10;&#10; The Active Message layer for the CC1000 radio. This configuration&#10; just layers the AM dispatch (CC1000ActiveMessageM) on top of the&#10; underlying CC1000 radio packet (CC1000CsmaRadioC), which is&#10; inherently an AM packet (acknowledgements based on AM destination&#10; addr and group).&#10; &#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageP" loc="38:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
        <short>&#10; Implementation component for CC1000ActiveMessageC.</short>
        <long>&#10; Implementation component for CC1000ActiveMessageC.&#10;&#10; @author Philip Levis&#10; @date June 19 2006&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC" loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
        <short>&#10; A low-power-listening CC1000 radio stack.</short>
        <long>&#10; A low-power-listening CC1000 radio stack.&#10;&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). &#10;&#10; CC1000RssiP (RSSI sharing), CC1000SquelchP (noise-floor estimation)&#10; and CC1000ControlP (radio configuration) provide supporting roles.&#10;&#10; This code has some degree of platform-independence, via the HplCC1000,&#10; RssiAdc and HplCC1000Spi interfaces which must be provided by the&#10; platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000CsmaP" loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <documentation loc="37:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the CSMA and low-power listening logic. Actual&#10; packet transmission and reception is in SendReceive.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SendReceiveP" loc="55:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <documentation loc="36:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the send and receive logic for the CC1000 radio.&#10; It does not do any media-access control. It requests the channel&#10; via the ready-to-send event (rts) and starts transmission on reception&#10; of the clear-to-send command (cts). It listens for packets if the&#10; listen() command is called, and stops listening when off() is called.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000RssiP" loc="44:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
        <short>&#10;   RSSI fun.</short>
        <long>&#10;   RSSI fun. It's used for lots of things, and a request to read it&#10;   for one purpose may have to be discarded if conditions change. For&#10;   example, if we've initiated a noise-floor measure, but start &#10;   receiving a packet, we have to:&#60;ul>&#10;   &#60;li>cancel the noise-floor measure (we don't know if the value will&#10;     reflect the received packet or the previous idle state)&#10;   &#60;li>start an RSSI measurement so that we can report signal strength&#10;     to the application&#10;   &#60;/ul>&#60;p>&#10;   This module hides the complexities of cancellation from the rest of&#10;   the stack.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SquelchP" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SquelchP.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SquelchP.nc">
        <short>&#10; Clear threshold estimation based on RSSI measurements.</short>
        <long>&#10; Clear threshold estimation based on RSSI measurements.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000ControlP" loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
      <documentation loc="32:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
        <short>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.</short>
        <long>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.  It exports a custom interface to control CC1000&#10; operation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000C" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
        <short>&#10; HPL for the CC1000 radio, for the mica2 platform.</short>
        <long>&#10; HPL for the CC1000 radio, for the mica2 platform.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000C.RssiChannel" loc="21(HplCC1000C.RssiChannel):/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <documentation loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <documentation loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="79(Atm128AdcC.AdcArbiter):/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="59:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="32(Atm128AdcC.AdcArbiter.Queue):/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="57(Atm128AdcC.PM):/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="48(Atm128AdcC.PM.PowerManager):/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <documentation loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="32:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="31:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
        <short>&#10; This is the configuration for RandomMlcgC, a &#10; multiplicative linear congruential generator.</short>
        <long>&#10; This is the configuration for RandomMlcgC, a &#10; multiplicative linear congruential generator. &#10;&#10; @author  Barbara Hohlt&#10; @author  Philip Levis&#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgP" loc="34:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
      <documentation loc="21:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC.TimerMilliC" loc="36(CC1000CsmaRadioC.TimerMilliC):/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b536e706720"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="41:/opt/tinyos-2.0.2/tos/system/ActiveMessageAddressC.nc">
      <documentation loc="34:/opt/tinyos-2.0.2/tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="38:/opt/tinyos-2.0.2/tos/platforms/mica/BusyWaitMicroC.nc">
      <documentation loc="29:/opt/tinyos-2.0.2/tos/platforms/mica/BusyWaitMicroC.nc">
        <short>&#10; Busy wait component as per TEP102.</short>
        <long>&#10; Busy wait component as per TEP102. Supports waiting for at least some&#10; number of microseconds. This functionality should be used sparingly,&#10; when the overhead of posting a Timer or Alarm is greater than simply&#10; busy waiting.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkAppC.AttestationResponseSender" loc="39(BlinkAppC.AttestationResponseSender):/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:146">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BlinkAppC.AttestationResponseSender.AMQueueEntryP" loc="35(BlinkAppC.AttestationResponseSender.AMQueueEntryP):/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="34:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="37(AMQueueP.AMQueueImplP):/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BlinkAppC.AttestationRequestReceiver" loc="35(BlinkAppC.AttestationRequestReceiver):/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:147">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b536e0be560" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b536e0be8a8" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b536e0bebf0" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b536e0c4e08" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b536e0d3198" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b536e0d3500" loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b536e0d3830" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b536e15c020" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b536e15c388" loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b536e15c6f0" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b536e15ca20" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadNowClientC" loc="21:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="79:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="59:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2b536e5c57e0" loc="79:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="32:/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x2b536e5db550" loc="32:/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc" abstract="">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x2b536e609020" loc="52:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="57:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="48:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x2b536e683e80" loc="23:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x2b536e683e80"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="36:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2b536e706720" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b536e706720"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2b536e706a10" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2b536e725c18" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b536e725c18"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2b536e722020" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b536e6efc60" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b536e6efc60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc" abstract="">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b536e81ecc8" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b536e81ecc8"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x2b536e84a020" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b536e88f720" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b536e88f720"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="39:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x2b536e8d8b30" loc="39:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="35:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x2b536e8d14c0" loc="35:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="37:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x2b536e8e7020" loc="37:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="35:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x2b536e92ce50" loc="35:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x2b536dfc8580" loc="47:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b536dfc8580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfc88d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b536dfc9130" loc="46:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b536dfc9130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b536dfc9480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b536dfc5148" loc="43:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b536dfc5148"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfc5498"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536dfbd580" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536dfbd580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfbd8d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b536dfce430" loc="41:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b536dfce430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b536dfce780"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b536dfce908"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b536dfcea90"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b536dfcec18"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b536dfceda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x2b536dfcc6c0" loc="36:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x2b536dfcc6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfcca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536dfcc020" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536dfcc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfcc370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x2b536dfccd88" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x2b536dfccd88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfca170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b536dfc4d10" loc="18:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b536dfc4d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfd10a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b536dfc4680" loc="17:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfc4680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfc49d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b536dfda198" loc="19:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b536dfda198"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfda4e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x2b536dfdb020" loc="18:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x2b536dfdb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536dfdb370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536dfdb4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536dfdb680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536dfdb808"/>
        <function-ref name="get" scoped="" ref="0x2b536dfdb990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536dfdbb18"/>
        <function-ref name="set" scoped="" ref="0x2b536dfdbca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536dfdbe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b536dfd1c78" loc="17:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfd1c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfdc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b536dfec358" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <component-ref qname="HplCC1000InitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b536dfec358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536dfec6a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PCLK" ref="0x2b536e037020" loc="51:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCLK" scoped="" ref="0x2b536e037020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e037370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0374f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e037680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e037808"/>
        <function-ref name="get" scoped="" ref="0x2b536e037990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e037b18"/>
        <function-ref name="set" scoped="" ref="0x2b536e037ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e037e28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CHP_OUT" ref="0x2b536e038c28" loc="49:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CHP_OUT" scoped="" ref="0x2b536e038c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e031020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0311a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e031330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0314b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e031640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0317c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e031950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e031ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiConfig" ref="0x2b536e0381f8" loc="45:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiConfig" scoped="" ref="0x2b536e0381f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b536e038548"/>
        <function-ref name="getChannel" scoped="" ref="0x2b536e0386d0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b536e038858"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PALE" ref="0x2b536e031df0" loc="50:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PALE" scoped="" ref="0x2b536e031df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e02c170"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e02c2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e02c480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e02c608"/>
        <function-ref name="get" scoped="" ref="0x2b536e02c790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e02c918"/>
        <function-ref name="set" scoped="" ref="0x2b536e02caa0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e02cc28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b536e025700" loc="43:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b536e025700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e025a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PDATA" ref="0x2b536e036198" loc="52:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PDATA" scoped="" ref="0x2b536e036198"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0364e8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e036670"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0367f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e036980"/>
        <function-ref name="get" scoped="" ref="0x2b536e036b08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e036c90"/>
        <function-ref name="set" scoped="" ref="0x2b536e036e18"/>
        <function-ref name="clr" scoped="" ref="0x2b536e035020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x2b536e02d7e8" loc="44:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x2b536e02d7e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e02db38"/>
        <function-ref name="read" scoped="" ref="0x2b536e02dcc0"/>
        <function-ref name="write" scoped="" ref="0x2b536e02de48"/>
        <function-ref name="getLOCK" scoped="" ref="0x2b536e032020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x2b536e05e630" loc="42:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x2b536e05e630"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x2b536e05e980"/>
        <function-ref name="initSlave" scoped="" ref="0x2b536e05eb08"/>
        <function-ref name="disableIntr" scoped="" ref="0x2b536e05ec90"/>
        <function-ref name="writeByte" scoped="" ref="0x2b536e05ee18"/>
        <function-ref name="enableIntr" scoped="" ref="0x2b536e056020"/>
        <function-ref name="txMode" scoped="" ref="0x2b536e0561a8"/>
        <function-ref name="readByte" scoped="" ref="0x2b536e056330"/>
        <function-ref name="rxMode" scoped="" ref="0x2b536e0564b8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e056640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiSck" ref="0x2b536e0569e8" loc="45:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiSck" scoped="" ref="0x2b536e0569e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e056d38"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e055020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0551a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e055330"/>
        <function-ref name="get" scoped="" ref="0x2b536e0554b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e055640"/>
        <function-ref name="set" scoped="" ref="0x2b536e0557c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e055950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b536e057140" loc="41:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b536e057140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e057490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMiso" ref="0x2b536e055c80" loc="46:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMiso" scoped="" ref="0x2b536e055c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e05d020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e05d1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e05d330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e05d4b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e05d640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e05d7c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e05d950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e05dad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMosi" ref="0x2b536e05de08" loc="47:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMosi" scoped="" ref="0x2b536e05de08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e05c1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e05c330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e05c4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e05c640"/>
        <function-ref name="get" scoped="" ref="0x2b536e05c7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e05c950"/>
        <function-ref name="set" scoped="" ref="0x2b536e05cad8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e05cc60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OC1C" ref="0x2b536e05b020" loc="48:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="OC1C" scoped="" ref="0x2b536e05b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e05b370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e05b4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e05b680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e05b808"/>
        <function-ref name="get" scoped="" ref="0x2b536e05b990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e05bb18"/>
        <function-ref name="set" scoped="" ref="0x2b536e05bca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e05be28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x2b536e0b67e0" loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x2b536e0b67e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b5020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b51a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0b5330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0b54b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b5640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b57c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b5950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b5ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x2b536e0a0348" loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x2b536e0a0348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a0698"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a0820"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a09a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a0b30"/>
        <function-ref name="get" scoped="" ref="0x2b536e0a0cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0a0e40"/>
        <function-ref name="set" scoped="" ref="0x2b536e09f020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e09f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x2b536e0a5348" loc="76:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x2b536e0a5348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a5698"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a5820"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a59a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a5b30"/>
        <function-ref name="get" scoped="" ref="0x2b536e0a5cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0a5e40"/>
        <function-ref name="set" scoped="" ref="0x2b536e0a4020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0a41a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x2b536e0ab020" loc="85:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x2b536e0ab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0ab370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0ab4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0ab680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0ab808"/>
        <function-ref name="get" scoped="" ref="0x2b536e0ab990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0abb18"/>
        <function-ref name="set" scoped="" ref="0x2b536e0abca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0abe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x2b536e087e00" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x2b536e087e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0861a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e086330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0864b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e086640"/>
        <function-ref name="get" scoped="" ref="0x2b536e0867c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e086950"/>
        <function-ref name="set" scoped="" ref="0x2b536e086ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e086c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x2b536e0aec78" loc="83:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x2b536e0aec78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0ad020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0ad1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0ad330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0ad4b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e0ad640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0ad7c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e0ad950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0adad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x2b536e0841a0" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x2b536e0841a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0844f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e084678"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e084800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e084988"/>
        <function-ref name="get" scoped="" ref="0x2b536e084b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e084c98"/>
        <function-ref name="set" scoped="" ref="0x2b536e084e20"/>
        <function-ref name="clr" scoped="" ref="0x2b536e083020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x2b536e098348" loc="57:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x2b536e098348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e098698"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e098820"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0989a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e098b30"/>
        <function-ref name="get" scoped="" ref="0x2b536e098cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e098e40"/>
        <function-ref name="set" scoped="" ref="0x2b536e097020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0971a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x2b536e09d7e0" loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x2b536e09d7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e09db30"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e09dcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e09de40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e09c020"/>
        <function-ref name="get" scoped="" ref="0x2b536e09c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e09c330"/>
        <function-ref name="set" scoped="" ref="0x2b536e09c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e09c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x2b536e0b17e0" loc="79:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x2b536e0b17e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b1b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b1cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0b1e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0b0020"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b01a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b0330"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b04b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x2b536e07c658" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x2b536e07c658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e07c9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e07cb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e07ccb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e07ce40"/>
        <function-ref name="get" scoped="" ref="0x2b536e07b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e07b1a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e07b330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e07b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x2b536e091658" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x2b536e091658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0919a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e091b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e091cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e091e40"/>
        <function-ref name="get" scoped="" ref="0x2b536e090020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0901a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e090330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0904b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x2b536e0957e0" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x2b536e0957e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e095b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e095cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e095e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e094020"/>
        <function-ref name="get" scoped="" ref="0x2b536e0941a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e094330"/>
        <function-ref name="set" scoped="" ref="0x2b536e0944b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e094640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x2b536e09ac78" loc="71:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x2b536e09ac78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a9020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a91a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a9330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a94b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e0a9640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0a97c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e0a9950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0a9ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x2b536e0b84d0" loc="88:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x2b536e0b84d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b8820"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b89a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0b8b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0b8cb8"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b8e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b7020"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b71a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x2b536e0b21a0" loc="94:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x2b536e0b21a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b24f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b2678"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0b2800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0b2988"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b2c98"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b2e20"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0c2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x2b536e0a7020" loc="74:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x2b536e0a7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a7370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a74f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a7680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a7808"/>
        <function-ref name="get" scoped="" ref="0x2b536e0a7990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0a7b18"/>
        <function-ref name="set" scoped="" ref="0x2b536e0a7ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0a7e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x2b536e089af0" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x2b536e089af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e089e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e088020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0881a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e088330"/>
        <function-ref name="get" scoped="" ref="0x2b536e0884b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e088640"/>
        <function-ref name="set" scoped="" ref="0x2b536e0887c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e088950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x2b536e08dc78" loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x2b536e08dc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e08c020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e08c1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e08c330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e08c4b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e08c640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e08c7c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e08c950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e08cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x2b536e0b5e00" loc="92:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x2b536e0b5e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b41a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b4330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0b44b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0b4640"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b47c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b4950"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b4ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b4c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x2b536e08a020" loc="55:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x2b536e08a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e08a370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e08a4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e08a680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e08a808"/>
        <function-ref name="get" scoped="" ref="0x2b536e08a990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e08ab18"/>
        <function-ref name="set" scoped="" ref="0x2b536e08aca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e08ae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x2b536e09f4d0" loc="66:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x2b536e09f4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e09f820"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e09f9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e09fb30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e09fcb8"/>
        <function-ref name="get" scoped="" ref="0x2b536e09fe40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e09e020"/>
        <function-ref name="set" scoped="" ref="0x2b536e09e1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e09e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x2b536e0a44d0" loc="77:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x2b536e0a44d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a4820"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a49a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a4b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a4cb8"/>
        <function-ref name="get" scoped="" ref="0x2b536e0a4e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0a2020"/>
        <function-ref name="set" scoped="" ref="0x2b536e0a21a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0a2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x2b536e0aa1a0" loc="86:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x2b536e0aa1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0aa4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0aa678"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0aa800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0aa988"/>
        <function-ref name="get" scoped="" ref="0x2b536e0aab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0aac98"/>
        <function-ref name="set" scoped="" ref="0x2b536e0aae20"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x2b536e085020" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x2b536e085020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e085370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0854f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e085680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e085808"/>
        <function-ref name="get" scoped="" ref="0x2b536e085990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e085b18"/>
        <function-ref name="set" scoped="" ref="0x2b536e085ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e085e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x2b536e083348" loc="47:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x2b536e083348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e083698"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e083820"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0839a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e083b30"/>
        <function-ref name="get" scoped="" ref="0x2b536e083cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e083e40"/>
        <function-ref name="set" scoped="" ref="0x2b536e082020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0821a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x2b536e0974d0" loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x2b536e0974d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e097820"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0979a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e097b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e097cb8"/>
        <function-ref name="get" scoped="" ref="0x2b536e097e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e096020"/>
        <function-ref name="set" scoped="" ref="0x2b536e0961a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e096330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x2b536e09c968" loc="69:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x2b536e09c968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e09ccb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e09ce40"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e09b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e09b1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e09b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e09b4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e09b640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e09b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x2b536e0b0968" loc="80:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x2b536e0b0968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b0cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b0e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0af020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0af1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e0af330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0af4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e0af640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0af7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x2b536e07b7e0" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x2b536e07b7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e07bb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e07bcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e07be40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e07a020"/>
        <function-ref name="get" scoped="" ref="0x2b536e07a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e07a330"/>
        <function-ref name="set" scoped="" ref="0x2b536e07a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e07a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x2b536e0907e0" loc="50:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x2b536e0907e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e090c30"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e090db8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e08f020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e08f1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e08f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e08f4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e08f640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e08f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x2b536e094968" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x2b536e094968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e094cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e094e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e093020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0931a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e093330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0934b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e093640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0937c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x2b536e0b7658" loc="89:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x2b536e0b7658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b79a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b7b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0b7cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0b7e40"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b61a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b6330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b64b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x2b536e092c78" loc="64:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x2b536e092c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a13e8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a1570"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a16f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a1880"/>
        <function-ref name="get" scoped="" ref="0x2b536e0a1a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0a1b90"/>
        <function-ref name="set" scoped="" ref="0x2b536e0a1d18"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0a0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x2b536e0a61a0" loc="75:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x2b536e0a61a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a64f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a6678"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a6800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a6988"/>
        <function-ref name="get" scoped="" ref="0x2b536e0a6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0a6c98"/>
        <function-ref name="set" scoped="" ref="0x2b536e0a6e20"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0a5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x2b536e0ade00" loc="84:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x2b536e0ade00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0ac1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0ac330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0ac4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0ac640"/>
        <function-ref name="get" scoped="" ref="0x2b536e0ac7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0ac950"/>
        <function-ref name="set" scoped="" ref="0x2b536e0acad8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0acc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x2b536e0c2348" loc="95:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x2b536e0c2348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0c2698"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0c2820"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0c29a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0c2b30"/>
        <function-ref name="get" scoped="" ref="0x2b536e0c2cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0c2e40"/>
        <function-ref name="set" scoped="" ref="0x2b536e0c1020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0c11a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x2b536e088c78" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x2b536e088c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e087020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0871a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e087330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0874b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e087640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0877c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e087950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e087ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x2b536e08ce00" loc="53:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x2b536e08ce00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e08b1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e08b330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e08b4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e08b640"/>
        <function-ref name="get" scoped="" ref="0x2b536e08b7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e08b950"/>
        <function-ref name="set" scoped="" ref="0x2b536e08bad8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e08bc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x2b536e0afaf0" loc="82:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x2b536e0afaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0afe40"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0ae020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0ae1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0ae330"/>
        <function-ref name="get" scoped="" ref="0x2b536e0ae4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0ae640"/>
        <function-ref name="set" scoped="" ref="0x2b536e0ae7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0ae950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x2b536e0991a0" loc="56:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x2b536e0991a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0994f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e099678"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e099800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e099988"/>
        <function-ref name="get" scoped="" ref="0x2b536e099b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e099c98"/>
        <function-ref name="set" scoped="" ref="0x2b536e099e20"/>
        <function-ref name="clr" scoped="" ref="0x2b536e098020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x2b536e09e658" loc="67:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x2b536e09e658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e09e9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e09eb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e09ecb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e09ee40"/>
        <function-ref name="get" scoped="" ref="0x2b536e09d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e09d1a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e09d330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e09d4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x2b536e0a2658" loc="78:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x2b536e0a2658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a29a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a2b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a2cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a2e40"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b11a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b1330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b14b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x2b536e0b9348" loc="87:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x2b536e0b9348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b9698"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b9820"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0b99a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0b9b30"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b9cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b9e40"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b8020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x2b536e07d3f0" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x2b536e07d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e07d740"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e07d8c8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e07da50"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e07dbd8"/>
        <function-ref name="get" scoped="" ref="0x2b536e07dd60"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e07c020"/>
        <function-ref name="set" scoped="" ref="0x2b536e07c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e07c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x2b536e0824d0" loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x2b536e0824d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e082820"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0829a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e082b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e082cb8"/>
        <function-ref name="get" scoped="" ref="0x2b536e082e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e091020"/>
        <function-ref name="set" scoped="" ref="0x2b536e0911a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e091330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x2b536e096658" loc="59:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x2b536e096658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0969a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e096b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e096cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e096e40"/>
        <function-ref name="get" scoped="" ref="0x2b536e095020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0951a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e095330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0954b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x2b536e09baf0" loc="70:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x2b536e09baf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e09be40"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e09a020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e09a1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e09a330"/>
        <function-ref name="get" scoped="" ref="0x2b536e09a4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e09a640"/>
        <function-ref name="set" scoped="" ref="0x2b536e09a7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e09a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x2b536e0b3020" loc="93:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x2b536e0b3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0b3370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0b34f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0b3680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0b3808"/>
        <function-ref name="get" scoped="" ref="0x2b536e0b3990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0b3b18"/>
        <function-ref name="set" scoped="" ref="0x2b536e0b3ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0b3e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x2b536e0a9e00" loc="73:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x2b536e0a9e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0a81a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0a8330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0a84b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0a8640"/>
        <function-ref name="get" scoped="" ref="0x2b536e0a87c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0a8950"/>
        <function-ref name="set" scoped="" ref="0x2b536e0a8ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0a8c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x2b536e093af0" loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x2b536e093af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e093e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e092020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0921a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e092330"/>
        <function-ref name="get" scoped="" ref="0x2b536e0924b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e092640"/>
        <function-ref name="set" scoped="" ref="0x2b536e0927c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e092950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x2b536e07a968" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x2b536e07a968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e07acb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e07ae40"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e089020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0891a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e089330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0894b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e089640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0897c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x2b536e08faf0" loc="51:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x2b536e08faf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e08fe40"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e08d020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e08d1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e08d330"/>
        <function-ref name="get" scoped="" ref="0x2b536e08d4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e08d640"/>
        <function-ref name="set" scoped="" ref="0x2b536e08d7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e08d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b536e0fa120" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b536e0fa120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0fa470"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0fa5f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0fa780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0fa908"/>
        <function-ref name="get" scoped="" ref="0x2b536e0faa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0fac18"/>
        <function-ref name="set" scoped="" ref="0x2b536e0fada0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b536e1085b8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b536e1085b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e108908"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e108a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e108c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e108da0"/>
        <function-ref name="get" scoped="" ref="0x2b536e107020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1071a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e107330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1074b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b536e0fddc0" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b536e0fddc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0fc170"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0fc2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0fc480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0fc608"/>
        <function-ref name="get" scoped="" ref="0x2b536e0fc790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0fc918"/>
        <function-ref name="set" scoped="" ref="0x2b536e0fcaa0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0fcc28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b536e0f92a8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b536e0f92a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0f95f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0f9780"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0f9908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0f9a90"/>
        <function-ref name="get" scoped="" ref="0x2b536e0f9c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0f9da0"/>
        <function-ref name="set" scoped="" ref="0x2b536e109020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1091a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b536e107740" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b536e107740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e107a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e107c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e107da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e106020"/>
        <function-ref name="get" scoped="" ref="0x2b536e1061a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e106330"/>
        <function-ref name="set" scoped="" ref="0x2b536e1064b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e106640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b536e0fb020" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b536e0fb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e0fb370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e0fb4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e0fb680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e0fb808"/>
        <function-ref name="get" scoped="" ref="0x2b536e0fb990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e0fbb18"/>
        <function-ref name="set" scoped="" ref="0x2b536e0fbca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e0fbe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b536e109430" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b536e109430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e109780"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e109908"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e109a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e109c18"/>
        <function-ref name="get" scoped="" ref="0x2b536e109da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e108020"/>
        <function-ref name="set" scoped="" ref="0x2b536e1081a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e108330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b536e1068c8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b536e1068c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e106c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e106da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e105020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1051a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e105330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1054b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e105640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1057c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e997100" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e997100"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e997450"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9975d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e997760"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9978e8"/>
        <function-ref name="get" scoped="" ref="0x2b536e997a70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e997bf8"/>
        <function-ref name="set" scoped="" ref="0x2b536e997d80"/>
        <function-ref name="clr" scoped="" ref="0x2b536e996020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e994100" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e994100"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e994450"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9945d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e994760"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9948e8"/>
        <function-ref name="get" scoped="" ref="0x2b536e994a70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e994bf8"/>
        <function-ref name="set" scoped="" ref="0x2b536e994d80"/>
        <function-ref name="clr" scoped="" ref="0x2b536e993020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e991100" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e991100"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e991450"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9915d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e991760"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9918e8"/>
        <function-ref name="get" scoped="" ref="0x2b536e991a70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e991bf8"/>
        <function-ref name="set" scoped="" ref="0x2b536e991d80"/>
        <function-ref name="clr" scoped="" ref="0x2b536e990020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e98e100" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e98e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e98e450"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e98e5d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e98e760"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e98e8e8"/>
        <function-ref name="get" scoped="" ref="0x2b536e98ea70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e98ebf8"/>
        <function-ref name="set" scoped="" ref="0x2b536e98ed80"/>
        <function-ref name="clr" scoped="" ref="0x2b536e98d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e98b100" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e98b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e98b450"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e98b5d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e98b760"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e98b8e8"/>
        <function-ref name="get" scoped="" ref="0x2b536e98ba70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e98bbf8"/>
        <function-ref name="set" scoped="" ref="0x2b536e98bd80"/>
        <function-ref name="clr" scoped="" ref="0x2b536e98a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e988100" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e988100"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e988450"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9885d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e988760"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9888e8"/>
        <function-ref name="get" scoped="" ref="0x2b536e988a70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e988bf8"/>
        <function-ref name="set" scoped="" ref="0x2b536e988d80"/>
        <function-ref name="clr" scoped="" ref="0x2b536e986020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e984100" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e984100"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e984450"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9845d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e984760"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9848e8"/>
        <function-ref name="get" scoped="" ref="0x2b536e984a70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e984bf8"/>
        <function-ref name="set" scoped="" ref="0x2b536e984d80"/>
        <function-ref name="clr" scoped="" ref="0x2b536e983020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e9b5100" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e9b5100"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e9b5450"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9b55d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e9b5760"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9b58e8"/>
        <function-ref name="get" scoped="" ref="0x2b536e9b5a70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e9b5bf8"/>
        <function-ref name="set" scoped="" ref="0x2b536e9b5d80"/>
        <function-ref name="clr" scoped="" ref="0x2b536e9b4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b536e10fbd8" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b536e10fbd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e10e020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e10e1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e10e330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e10e4b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e10e640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e10e7c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e10e950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e10ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b536e10b020" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b536e10b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e10b370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e10b4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e10b680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e10b808"/>
        <function-ref name="get" scoped="" ref="0x2b536e10b990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e10bb18"/>
        <function-ref name="set" scoped="" ref="0x2b536e10bca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e10be28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b536e112930" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b536e112930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e112c80"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e112e08"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e110020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1101a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e110330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1104b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e110640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1107c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b536e10ed60" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b536e10ed60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e10d0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e10d260"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e10d3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e10d570"/>
        <function-ref name="get" scoped="" ref="0x2b536e10d6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e10d880"/>
        <function-ref name="set" scoped="" ref="0x2b536e10da08"/>
        <function-ref name="clr" scoped="" ref="0x2b536e10db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b536e11c120" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b536e11c120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e11c470"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e11c5f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e11c780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e11c908"/>
        <function-ref name="get" scoped="" ref="0x2b536e11ca90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e11cc18"/>
        <function-ref name="set" scoped="" ref="0x2b536e11cda0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e11b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b536e110a50" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b536e110a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e110da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e10f020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e10f1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e10f330"/>
        <function-ref name="get" scoped="" ref="0x2b536e10f4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e10f640"/>
        <function-ref name="set" scoped="" ref="0x2b536e10f7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e10f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b536e10de18" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b536e10de18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e10c1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e10c330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e10c4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e10c640"/>
        <function-ref name="get" scoped="" ref="0x2b536e10c7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e10c950"/>
        <function-ref name="set" scoped="" ref="0x2b536e10cad8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e10cc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b536e11b2a8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b536e11b2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e11b5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e11b780"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e11b908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e11ba90"/>
        <function-ref name="get" scoped="" ref="0x2b536e11bc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e11bda0"/>
        <function-ref name="set" scoped="" ref="0x2b536e11a020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e11a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e9d6448" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e9d6448"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e9d6798"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9d6920"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e9d6aa8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9d6c30"/>
        <function-ref name="get" scoped="" ref="0x2b536e9d6db8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e9d5020"/>
        <function-ref name="set" scoped="" ref="0x2b536e9d51a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e9d5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e9d3480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e9d3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e9d37d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9d3958"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e9d3ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9d3c68"/>
        <function-ref name="get" scoped="" ref="0x2b536e9d3df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e9d2020"/>
        <function-ref name="set" scoped="" ref="0x2b536e9d21a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e9d2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea06480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea06480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea067d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea06958"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea06ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea06c68"/>
        <function-ref name="get" scoped="" ref="0x2b536ea06df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea05020"/>
        <function-ref name="set" scoped="" ref="0x2b536ea051a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea05330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea03480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea03480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea037d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea03958"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea03ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea03c68"/>
        <function-ref name="get" scoped="" ref="0x2b536ea03df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea02020"/>
        <function-ref name="set" scoped="" ref="0x2b536ea021a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea02330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea00480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea00480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea007d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea00958"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea00ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea00c68"/>
        <function-ref name="get" scoped="" ref="0x2b536ea00df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e9ff020"/>
        <function-ref name="set" scoped="" ref="0x2b536e9ff1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e9ff330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e9fd480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e9fd480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e9fd7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9fd958"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e9fdae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9fdc68"/>
        <function-ref name="get" scoped="" ref="0x2b536e9fddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e9fc020"/>
        <function-ref name="set" scoped="" ref="0x2b536e9fc1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e9fc330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e9fa480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e9fa480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e9fa7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9fa958"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e9faae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9fac68"/>
        <function-ref name="get" scoped="" ref="0x2b536e9fadf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e9f8020"/>
        <function-ref name="set" scoped="" ref="0x2b536e9f81a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e9f8330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e9f6480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e9f6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e9f67d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e9f6958"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e9f6ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e9f6c68"/>
        <function-ref name="get" scoped="" ref="0x2b536e9f6df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e9f5020"/>
        <function-ref name="set" scoped="" ref="0x2b536e9f51a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e9f5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b536e124740" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b536e124740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e124a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e124c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e124da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e123020"/>
        <function-ref name="get" scoped="" ref="0x2b536e1231a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e123330"/>
        <function-ref name="set" scoped="" ref="0x2b536e1234b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e123640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b536e121bd8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b536e121bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e120020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1201a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e120330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1204b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e120640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1207c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e120950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e120ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b536e114500" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b536e114500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e114850"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1149d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e114b60"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e114ce8"/>
        <function-ref name="get" scoped="" ref="0x2b536e114e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e125020"/>
        <function-ref name="set" scoped="" ref="0x2b536e1251a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e125330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b536e1238c8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b536e1238c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e123c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e123da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e122020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1221a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e122330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1224b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e122640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1227c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b536e120d60" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b536e120d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e11f0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e11f260"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e11f3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e11f570"/>
        <function-ref name="get" scoped="" ref="0x2b536e11f6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e11f880"/>
        <function-ref name="set" scoped="" ref="0x2b536e11fa08"/>
        <function-ref name="clr" scoped="" ref="0x2b536e11fb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b536e1255b8" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b536e1255b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e125908"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e125a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e125c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e125da0"/>
        <function-ref name="get" scoped="" ref="0x2b536e124020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1241a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e124330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1244b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b536e122a50" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b536e122a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e122da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e121020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e1211a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e121330"/>
        <function-ref name="get" scoped="" ref="0x2b536e1214b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e121640"/>
        <function-ref name="set" scoped="" ref="0x2b536e1217c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e121950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b536e11fe18" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b536e11fe18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e11e1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e11e330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e11e4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e11e640"/>
        <function-ref name="get" scoped="" ref="0x2b536e11e7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e11e950"/>
        <function-ref name="set" scoped="" ref="0x2b536e11ead8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e11ec60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea4f6a8" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea4f6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea4f9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea4fb80"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea4fd08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea4e020"/>
        <function-ref name="get" scoped="" ref="0x2b536ea4e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea4e330"/>
        <function-ref name="set" scoped="" ref="0x2b536ea4e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea4e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea4c710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea4c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea4ca60"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea4cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea4cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea4b020"/>
        <function-ref name="get" scoped="" ref="0x2b536ea4b1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea4b330"/>
        <function-ref name="set" scoped="" ref="0x2b536ea4b4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea4b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea49710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea49710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea49a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea49be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea49d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea48020"/>
        <function-ref name="get" scoped="" ref="0x2b536ea481a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea48330"/>
        <function-ref name="set" scoped="" ref="0x2b536ea484b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea48640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea46710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea46710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea46a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea46be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea46d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea45020"/>
        <function-ref name="get" scoped="" ref="0x2b536ea451a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea45330"/>
        <function-ref name="set" scoped="" ref="0x2b536ea454b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea45640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea43710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea43710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea43a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea43be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea43d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea42020"/>
        <function-ref name="get" scoped="" ref="0x2b536ea421a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea42330"/>
        <function-ref name="set" scoped="" ref="0x2b536ea424b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea42640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea40710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea40710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea40a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea40be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea40d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea3f020"/>
        <function-ref name="get" scoped="" ref="0x2b536ea3f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea3f330"/>
        <function-ref name="set" scoped="" ref="0x2b536ea3f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea3f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea3d710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea3d710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea3da60"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea3dbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea3dd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea73020"/>
        <function-ref name="get" scoped="" ref="0x2b536ea731a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea73330"/>
        <function-ref name="set" scoped="" ref="0x2b536ea734b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea73640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea71710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea71710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea71a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea71be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea71d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea70020"/>
        <function-ref name="get" scoped="" ref="0x2b536ea701a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea70330"/>
        <function-ref name="set" scoped="" ref="0x2b536ea704b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea70640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b536e127120" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b536e127120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e127470"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1275f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e127780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e127908"/>
        <function-ref name="get" scoped="" ref="0x2b536e127a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e127c18"/>
        <function-ref name="set" scoped="" ref="0x2b536e127da0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e126020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b536e1365b8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b536e1365b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e136908"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e136a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e136c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e136da0"/>
        <function-ref name="get" scoped="" ref="0x2b536e134020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1341a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e134330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1344b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b536e12ae40" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b536e12ae40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e1291c0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e129348"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e1294d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e129658"/>
        <function-ref name="get" scoped="" ref="0x2b536e1297e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e129968"/>
        <function-ref name="set" scoped="" ref="0x2b536e129af0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e129c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b536e1262a8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b536e1262a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e1265f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e126780"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e126908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e126a90"/>
        <function-ref name="get" scoped="" ref="0x2b536e126c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e126da0"/>
        <function-ref name="set" scoped="" ref="0x2b536e137020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1371a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b536e134740" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b536e134740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e134a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e134c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e134da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e133020"/>
        <function-ref name="get" scoped="" ref="0x2b536e1331a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e133330"/>
        <function-ref name="set" scoped="" ref="0x2b536e1334b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e133640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b536e128020" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b536e128020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e128370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1284f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e128680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e128808"/>
        <function-ref name="get" scoped="" ref="0x2b536e128990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e128b18"/>
        <function-ref name="set" scoped="" ref="0x2b536e128ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e128e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b536e137430" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b536e137430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e137780"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e137908"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e137a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e137c18"/>
        <function-ref name="get" scoped="" ref="0x2b536e137da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e136020"/>
        <function-ref name="set" scoped="" ref="0x2b536e1361a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e136330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b536e1338c8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b536e1338c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e133c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e133da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e132020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1321a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e132330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1324b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e132640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1327c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea97970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea97970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea97cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea97e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea96020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea961a8"/>
        <function-ref name="get" scoped="" ref="0x2b536ea96330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea964b8"/>
        <function-ref name="set" scoped="" ref="0x2b536ea96640"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea967c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea94970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea94970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea94cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea94e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536ea93020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536ea931a8"/>
        <function-ref name="get" scoped="" ref="0x2b536ea93330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536ea934b8"/>
        <function-ref name="set" scoped="" ref="0x2b536ea93640"/>
        <function-ref name="clr" scoped="" ref="0x2b536ea937c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536ea91970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536ea91970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536ea91cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536ea91e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eac8020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eac81a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eac8330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eac84b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eac8640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eac87c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eac6970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eac6970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eac6cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eac6e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eac5020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eac51a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eac5330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eac54b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eac5640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eac57c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eac3970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eac3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eac3cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eac3e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eac2020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eac21a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eac2330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eac24b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eac2640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eac27c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eac0970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eac0970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eac0cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eac0e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eabf020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eabf1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eabf330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eabf4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eabf640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eabf7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eabd970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eabd970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eabdcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eabde48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eabc020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eabc1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eabc330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eabc4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eabc640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eabc7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eaba970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eaba970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eabacc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eabae48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eab8020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eab81a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eab8330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eab84b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eab8640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eab87c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b536e13ebd8" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b536e13ebd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e13c020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e13c1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e13c330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e13c4b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e13c640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e13c7c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e13c950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e13cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b536e139020" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b536e139020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e139370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1394f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e139680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e139808"/>
        <function-ref name="get" scoped="" ref="0x2b536e139990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e139b18"/>
        <function-ref name="set" scoped="" ref="0x2b536e139ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e139e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b536e140930" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b536e140930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e140c80"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e140e08"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e13f020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e13f1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e13f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e13f4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e13f640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e13f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b536e13cd60" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b536e13cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e13b0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e13b260"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e13b3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e13b570"/>
        <function-ref name="get" scoped="" ref="0x2b536e13b6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e13b880"/>
        <function-ref name="set" scoped="" ref="0x2b536e13ba08"/>
        <function-ref name="clr" scoped="" ref="0x2b536e13bb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b536e138120" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b536e138120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e138470"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1385f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e138780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e138908"/>
        <function-ref name="get" scoped="" ref="0x2b536e138a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e138c18"/>
        <function-ref name="set" scoped="" ref="0x2b536e138da0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e14b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b536e13fa50" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b536e13fa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e13fda0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e13e020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e13e1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e13e330"/>
        <function-ref name="get" scoped="" ref="0x2b536e13e4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e13e640"/>
        <function-ref name="set" scoped="" ref="0x2b536e13e7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e13e950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b536e13be18" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b536e13be18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e13a1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e13a330"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e13a4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e13a640"/>
        <function-ref name="get" scoped="" ref="0x2b536e13a7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e13a950"/>
        <function-ref name="set" scoped="" ref="0x2b536e13aad8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e13ac60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b536e14b2a8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b536e14b2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e14b5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e14b780"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e14b908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e14ba90"/>
        <function-ref name="get" scoped="" ref="0x2b536e14bc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e14bda0"/>
        <function-ref name="set" scoped="" ref="0x2b536e14a020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e14a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb1c970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb1c970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb1ccc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb1ce48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb1b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb1b1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb1b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb1b4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb1b640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb1b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb19970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb19970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb19cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb19e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb18020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb181a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb18330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb184b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb18640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb187c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb16970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb16970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb16cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb16e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb15020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb151a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb15330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb154b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb15640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb157c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb13970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb13970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb13cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb13e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb12020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb121a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb12330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb124b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb12640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb127c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb10970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb10970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb10cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb10e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb0f020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb0f1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb0f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb0f4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb0f640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb0f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb0d970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb0d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb0dcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb0de48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb0c020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb0c1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb0c330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb0c4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb0c640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb0c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb0a970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb0a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb0acc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb0ae48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb09020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb091a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb09330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb094b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb09640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb097c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb07970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb07970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb07cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb07e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb05020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb051a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb05330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb054b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb05640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb057c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b536e142430" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b536e142430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e142780"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e142908"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e142a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e142c18"/>
        <function-ref name="get" scoped="" ref="0x2b536e142da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e155020"/>
        <function-ref name="set" scoped="" ref="0x2b536e1551a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e155330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b536e1538c8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b536e1538c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e153c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e153da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e152020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1521a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e152330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1524b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e152640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1527c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b536e1441e8" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b536e1441e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e144538"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1446c0"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e144848"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1449d0"/>
        <function-ref name="get" scoped="" ref="0x2b536e144b58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e144ce0"/>
        <function-ref name="set" scoped="" ref="0x2b536e144e68"/>
        <function-ref name="clr" scoped="" ref="0x2b536e143020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b536e1555b8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b536e1555b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e155908"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e155a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e155c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e155da0"/>
        <function-ref name="get" scoped="" ref="0x2b536e154020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1541a8"/>
        <function-ref name="set" scoped="" ref="0x2b536e154330"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1544b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b536e152a50" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b536e152a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e152da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e151020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e1511a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e151330"/>
        <function-ref name="get" scoped="" ref="0x2b536e1514b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e151640"/>
        <function-ref name="set" scoped="" ref="0x2b536e1517c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e151950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b536e1432a8" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b536e1432a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e1435f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e143780"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e143908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e143a90"/>
        <function-ref name="get" scoped="" ref="0x2b536e143c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e143da0"/>
        <function-ref name="set" scoped="" ref="0x2b536e142020"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1421a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b536e154740" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b536e154740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e154a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e154c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e154da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e153020"/>
        <function-ref name="get" scoped="" ref="0x2b536e1531a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e153330"/>
        <function-ref name="set" scoped="" ref="0x2b536e1534b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e153640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b536e151bd8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b536e151bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e150020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1501a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e150330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1504b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e150640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1507c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e150950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e150ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb6d970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb6d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb6dcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb6de48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb6c020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb6c1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb6c330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb6c4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb6c640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb6c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb6a970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb6a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb6acc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb6ae48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb69020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb691a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb69330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb694b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb69640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb697c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb67970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb67970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb67cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb67e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb66020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb661a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb66330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb664b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb66640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb667c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb64970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb64970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb64cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb64e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb63020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb631a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb63330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb634b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb63640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb637c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb61970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb61970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb61cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb61e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb60020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb601a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb60330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb604b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb60640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb607c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb5e970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb5e970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb5ecc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb5ee48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb5d020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb5d1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb5d330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb5d4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb5d640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb5d7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb5b970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb5b970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb5bcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb5be48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb96020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb961a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb96330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb964b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb96640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb967c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536eb94970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536eb94970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536eb94cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536eb94e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536eb93020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536eb931a8"/>
        <function-ref name="get" scoped="" ref="0x2b536eb93330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536eb934b8"/>
        <function-ref name="set" scoped="" ref="0x2b536eb93640"/>
        <function-ref name="clr" scoped="" ref="0x2b536eb937c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e15da70" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e15da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e15ddc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e172020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e1721a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e172330"/>
        <function-ref name="get" scoped="" ref="0x2b536e1724b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e172640"/>
        <function-ref name="set" scoped="" ref="0x2b536e1727c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e172950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e16fdb8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e16fdb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e16e170"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e16e2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e16e480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e16e608"/>
        <function-ref name="get" scoped="" ref="0x2b536e16e790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e16e918"/>
        <function-ref name="set" scoped="" ref="0x2b536e16eaa0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e16ec28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e17d3e0" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e17d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e17d730"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e17d8b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e17da40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e17dbc8"/>
        <function-ref name="get" scoped="" ref="0x2b536e17dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e17c020"/>
        <function-ref name="set" scoped="" ref="0x2b536e17c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e17c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e1787e8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e1787e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e178b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e178cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e178e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e177020"/>
        <function-ref name="get" scoped="" ref="0x2b536e1771a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e177330"/>
        <function-ref name="set" scoped="" ref="0x2b536e1774b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e177640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e174c38" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e174c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e187020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1871a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e187330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1874b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e187640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1877c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e187950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e187ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e182020" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e182020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e182370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1824f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e182680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e182808"/>
        <function-ref name="get" scoped="" ref="0x2b536e182990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e182b18"/>
        <function-ref name="set" scoped="" ref="0x2b536e182ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e182e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e191480" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e191480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e1917d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e191958"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e191ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e191c68"/>
        <function-ref name="get" scoped="" ref="0x2b536e191df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e190020"/>
        <function-ref name="set" scoped="" ref="0x2b536e1901a8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e190330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e18d7e8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e18d7e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e18db38"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e18dcc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e18de48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e18c020"/>
        <function-ref name="get" scoped="" ref="0x2b536e18c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e18c330"/>
        <function-ref name="set" scoped="" ref="0x2b536e18c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e18c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e188970" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e188970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e188cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e188e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e19b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e19b1a8"/>
        <function-ref name="get" scoped="" ref="0x2b536e19b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e19b4b8"/>
        <function-ref name="set" scoped="" ref="0x2b536e19b640"/>
        <function-ref name="clr" scoped="" ref="0x2b536e19b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e197ab0" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e197ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e197e00"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e196020"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e1961a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e196330"/>
        <function-ref name="get" scoped="" ref="0x2b536e1964b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e196640"/>
        <function-ref name="set" scoped="" ref="0x2b536e1967c8"/>
        <function-ref name="clr" scoped="" ref="0x2b536e196950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e193c38" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e193c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e192020"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1921a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e192330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1924b8"/>
        <function-ref name="get" scoped="" ref="0x2b536e192640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1927c8"/>
        <function-ref name="set" scoped="" ref="0x2b536e192950"/>
        <function-ref name="clr" scoped="" ref="0x2b536e192ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e1a1020" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e1a1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e1a1370"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e1a14f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e1a1680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e1a1808"/>
        <function-ref name="get" scoped="" ref="0x2b536e1a1990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e1a1b18"/>
        <function-ref name="set" scoped="" ref="0x2b536e1a1ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1a1e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b536e19c180" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b536e19c180"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b536e19c4d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b536e19c658"/>
        <function-ref name="toggle" scoped="" ref="0x2b536e19c7e0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b536e19c968"/>
        <function-ref name="get" scoped="" ref="0x2b536e19caf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b536e19cc78"/>
        <function-ref name="set" scoped="" ref="0x2b536e19ce00"/>
        <function-ref name="clr" scoped="" ref="0x2b536e1af020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e1da0d8" loc="27:/opt/tinyos-2.0.2/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e1da0d8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x2b536ded00b8"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x2b536ded00b8"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e1da428"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b536e1da708" loc="28:/opt/tinyos-2.0.2/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b536e1da708"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b536e1daa58"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b536e1dabe0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b536e1dad68"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b536e1ef020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b536e1ef1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x2b536e1fba60" loc="49:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b536e1fba60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e1fbdb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b536e1fc280" loc="46:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b536e1fc280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b536e1fc5d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x2b536e1fb398" loc="48:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b536e1fb398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e1fb6e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x2b536e1fc8b8" loc="47:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b536e1fc8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e1fcc08"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b536e1fcd90"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b536e1fb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b536dee2be8" loc="37:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b536dee2be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536ded8020"/>
        <function-ref name="runTask" scoped="" ref="0x2b536ded81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b536ded55c8" loc="36:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b536ded55c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536ded5918"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b536ded5aa0"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b536ded5c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b536df81e58" loc="45:/opt/tinyos-2.0.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b536df81e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536df801e8"/>
        <function-ref name="runTask" scoped="" ref="0x2b536df80370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2b536df88328" loc="46:/opt/tinyos-2.0.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b536df88328"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b536df88678"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b536df81020" loc="44:/opt/tinyos-2.0.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b536df81020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536df81370"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b536df814f8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b536df81680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2b536dfa7c10" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b536dfa7c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b536df9f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2b536dfa0020" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b536dfa0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b536dfa0370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2b536dfa8480" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b536dfa8480"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b536dfa87d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x2b536e2166d0" loc="38:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMControl" scoped="" ref="0x2b536e2166d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2b536e216a20"/>
        <function-ref name="stopDone" scoped="" ref="0x2b536e216ba8"/>
        <function-ref name="start" scoped="" ref="0x2b536e216d30"/>
        <function-ref name="stop" scoped="" ref="0x2b536e21b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2b536e206020" loc="36:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b536e206020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b536e206370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x2b536e248b80" loc="40:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e248b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e237020"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e2371a8"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e237330"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e2374b8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e237640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AttestationResponseSend" ref="0x2b536e240590" loc="41:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AttestationResponseSend" scoped="" ref="0x2b536e240590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e2408e0"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e240a68"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e240bf0"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e240d78"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e236020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AttestationRequestReceive" ref="0x2b536e2547a0" loc="42:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AttestationRequestReceive" scoped="" ref="0x2b536e2547a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e254af0"/>
        <function-ref name="receive" scoped="" ref="0x2b536e254c78"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e254e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x2b536e21a020" loc="39:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b536e21a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b536e21a370"/>
        <function-ref name="source" scoped="" ref="0x2b536e21a4f8"/>
        <function-ref name="address" scoped="" ref="0x2b536e21a680"/>
        <function-ref name="destination" scoped="" ref="0x2b536e21a808"/>
        <function-ref name="setSource" scoped="" ref="0x2b536e21a990"/>
        <function-ref name="setDestination" scoped="" ref="0x2b536e21ab18"/>
        <function-ref name="type" scoped="" ref="0x2b536e21aca0"/>
        <function-ref name="setType" scoped="" ref="0x2b536e21ae28"/>
        <function-ref name="isForMe" scoped="" ref="0x2b536e215020"/>
        <function-ref name="setGroup" scoped="" ref="0x2b536e2151a8"/>
        <function-ref name="localGroup" scoped="" ref="0x2b536e215330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x2b536e259328" loc="48:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x2b536e259328"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2b536e259678"/>
        <function-ref name="stopDone" scoped="" ref="0x2b536e259800"/>
        <function-ref name="start" scoped="" ref="0x2b536e259988"/>
        <function-ref name="stop" scoped="" ref="0x2b536e259b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2b536e2582b0" loc="50:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2b536e2582b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e258600"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e258788"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e258910"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e258a98"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e258c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x2b536e255270" loc="52:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x2b536e255270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e2555c0"/>
        <function-ref name="receive" scoped="" ref="0x2b536e255748"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e2558d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2b536e255b58" loc="54:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e255b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e26c020"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e26c1a8"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e26c330"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e26c4b8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e26c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2b536e2563c8" loc="51:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2b536e2563c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e256718"/>
        <function-ref name="receive" scoped="" ref="0x2b536e2568a0"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e256a28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x2b536e265a08" loc="56:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e265a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2b536e265d58"/>
        <function-ref name="noAck" scoped="" ref="0x2b536e269020"/>
        <function-ref name="wasAcked" scoped="" ref="0x2b536e2691a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2b536e26c8e0" loc="55:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b536e26c8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b536e26cc30"/>
        <function-ref name="source" scoped="" ref="0x2b536e26cdb8"/>
        <function-ref name="address" scoped="" ref="0x2b536e26b020"/>
        <function-ref name="destination" scoped="" ref="0x2b536e26b1a8"/>
        <function-ref name="setSource" scoped="" ref="0x2b536e26b330"/>
        <function-ref name="setDestination" scoped="" ref="0x2b536e26b4b8"/>
        <function-ref name="type" scoped="" ref="0x2b536e26b640"/>
        <function-ref name="setType" scoped="" ref="0x2b536e26b7c8"/>
        <function-ref name="isForMe" scoped="" ref="0x2b536e26b950"/>
        <function-ref name="setGroup" scoped="" ref="0x2b536e26bad8"/>
        <function-ref name="localGroup" scoped="" ref="0x2b536e26bc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x2b536e263020" loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x2b536e263020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2b536e263370"/>
        <function-ref name="stopDone" scoped="" ref="0x2b536e2634f8"/>
        <function-ref name="start" scoped="" ref="0x2b536e263680"/>
        <function-ref name="stop" scoped="" ref="0x2b536e263808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2b536e262020" loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2b536e262020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e262370"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e2624f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e262680"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e262808"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e262990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x2b536e277050" loc="49:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x2b536e277050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e2773a0"/>
        <function-ref name="receive" scoped="" ref="0x2b536e277528"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e2776b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2b536e275020" loc="51:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e275020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e275370"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e2754f8"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e275680"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e275808"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e275990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2b536e2611c8" loc="48:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2b536e2611c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e261518"/>
        <function-ref name="receive" scoped="" ref="0x2b536e2616a0"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e261828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x2b536e275cb8" loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e275cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2b536e2740a0"/>
        <function-ref name="noAck" scoped="" ref="0x2b536e274228"/>
        <function-ref name="wasAcked" scoped="" ref="0x2b536e2743b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2b536e277950" loc="50:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b536e277950"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b536e277ca0"/>
        <function-ref name="source" scoped="" ref="0x2b536e277e28"/>
        <function-ref name="address" scoped="" ref="0x2b536e276020"/>
        <function-ref name="destination" scoped="" ref="0x2b536e2761a8"/>
        <function-ref name="setSource" scoped="" ref="0x2b536e276330"/>
        <function-ref name="setDestination" scoped="" ref="0x2b536e2764b8"/>
        <function-ref name="type" scoped="" ref="0x2b536e276640"/>
        <function-ref name="setType" scoped="" ref="0x2b536e2767c8"/>
        <function-ref name="isForMe" scoped="" ref="0x2b536e276950"/>
        <function-ref name="setGroup" scoped="" ref="0x2b536e276ad8"/>
        <function-ref name="localGroup" scoped="" ref="0x2b536e276c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x2b536e27eb40" loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x2b536e27eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e283020"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e2831a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e283330"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e2834b8"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e283640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x2b536e283978" loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x2b536e283978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e283cc8"/>
        <function-ref name="receive" scoped="" ref="0x2b536e283e50"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e282020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2b536e271570" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2b536e271570"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e2718c0"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e271a48"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e271bd0"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e271d58"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e270020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x2b536e26f628" loc="42:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x2b536e26f628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e26f978"/>
        <function-ref name="receive" scoped="" ref="0x2b536e26fb00"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e26fc88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x2b536e282328" loc="48:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e282328"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e282678"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e282800"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e282988"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e282b10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e282c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2b536e2707a0" loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2b536e2707a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e270af0"/>
        <function-ref name="receive" scoped="" ref="0x2b536e270c78"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e270e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2b536e26d020" loc="43:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b536e26d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b536e26d370"/>
        <function-ref name="source" scoped="" ref="0x2b536e26d4f8"/>
        <function-ref name="address" scoped="" ref="0x2b536e26d680"/>
        <function-ref name="destination" scoped="" ref="0x2b536e26d808"/>
        <function-ref name="setSource" scoped="" ref="0x2b536e26d990"/>
        <function-ref name="setDestination" scoped="" ref="0x2b536e26db18"/>
        <function-ref name="type" scoped="" ref="0x2b536e26dca0"/>
        <function-ref name="setType" scoped="" ref="0x2b536e26de28"/>
        <function-ref name="isForMe" scoped="" ref="0x2b536e284020"/>
        <function-ref name="setGroup" scoped="" ref="0x2b536e2841a8"/>
        <function-ref name="localGroup" scoped="" ref="0x2b536e284330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x2b536e272640" loc="54:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x2b536e272640"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2b536e272990"/>
        <function-ref name="stopDone" scoped="" ref="0x2b536e272b18"/>
        <function-ref name="start" scoped="" ref="0x2b536e272ca0"/>
        <function-ref name="stop" scoped="" ref="0x2b536e272e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2b536e2c7638" loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e2c7638"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e2c7988"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e2c7b10"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e2c7c98"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e2c7e20"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e2c6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x2b536e2c80c0" loc="55:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2b536e2c80c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e2c8410"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e2c8598"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e2c8720"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e2c88a8"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e2c8a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x2b536e2e6a60" loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x2b536e2e6a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="getLocalSleepInterval" scoped="" ref="0x2b536e2e6db0"/>
        <function-ref name="getRxDutyCycle" scoped="" ref="0x2b536e2d8020"/>
        <function-ref name="sleepIntervalToDutyCycle" scoped="" ref="0x2b536e2d81a8"/>
        <function-ref name="getLocalDutyCycle" scoped="" ref="0x2b536e2d8330"/>
        <function-ref name="setRxSleepInterval" scoped="" ref="0x2b536e2d84b8"/>
        <function-ref name="setLocalDutyCycle" scoped="" ref="0x2b536e2d8640"/>
        <function-ref name="setRxDutyCycle" scoped="" ref="0x2b536e2d87c8"/>
        <function-ref name="dutyCycleToSleepInterval" scoped="" ref="0x2b536e2d8950"/>
        <function-ref name="getRxSleepInterval" scoped="" ref="0x2b536e2d8ad8"/>
        <function-ref name="setLocalSleepInterval" scoped="" ref="0x2b536e2d8c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x2b536e2c3760" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x2b536e2c3760"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x2b536e2c3ab0"/>
        <function-ref name="enableCca" scoped="" ref="0x2b536e2c3c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2b536e2c8cc0" loc="56:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2b536e2c8cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e2c70a0"/>
        <function-ref name="receive" scoped="" ref="0x2b536e2c7228"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e2c73b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x2b536e2d6ac8" loc="62:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e2d6ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2b536e2d6e18"/>
        <function-ref name="noAck" scoped="" ref="0x2b536e2d9020"/>
        <function-ref name="wasAcked" scoped="" ref="0x2b536e2d91a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x2b536e2da9e0" loc="60:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x2b536e2da9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x2b536e2dad30"/>
        <function-ref name="initial" scoped="" ref="0x2b536e2c4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioTimeStamping" ref="0x2b536e2d62c8" loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioTimeStamping" scoped="" ref="0x2b536e2d62c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioTimeStamping"/>
      </instance>
      <interface-functions>
        <function-ref name="transmittedSFD" scoped="" ref="0x2b536e2d6618"/>
        <function-ref name="receivedSFD" scoped="" ref="0x2b536e2d67a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x2b536e2fb020" loc="56:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x2b536e2fb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2b536e2fb370"/>
        <function-ref name="stopDone" scoped="" ref="0x2b536e2fb4f8"/>
        <function-ref name="start" scoped="" ref="0x2b536e2fb680"/>
        <function-ref name="stop" scoped="" ref="0x2b536e2fb808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x2b536e334348" loc="71:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x2b536e334348"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df4e078"/>
            <typename><typedef-ref name="TMicro" ref="0x2b536df4e3d0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x2b536e3331d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="setWakeupTask" ref="0x2b536e340de8" loc="108:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="setWakeupTask" scoped="" ref="0x2b536e340de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e33e170"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e33e2f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startStopDone" ref="0x2b536e3451c8" loc="175:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startStopDone" scoped="" ref="0x2b536e3451c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e345518"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e3456a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiNoiseFloor" ref="0x2b536e32d878" loc="73:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiNoiseFloor" scoped="" ref="0x2b536e32d878"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e331490"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e331918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x2b536e328ae8" loc="69:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2b536e328ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2b536e328e38"/>
        <function-ref name="rand32" scoped="" ref="0x2b536e312020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x2b536e2faaa8" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x2b536e2faaa8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="getLocalSleepInterval" scoped="" ref="0x2b536e2fadf8"/>
        <function-ref name="getRxDutyCycle" scoped="" ref="0x2b536e2f9020"/>
        <function-ref name="sleepIntervalToDutyCycle" scoped="" ref="0x2b536e2f91a8"/>
        <function-ref name="getLocalDutyCycle" scoped="" ref="0x2b536e2f9330"/>
        <function-ref name="setRxSleepInterval" scoped="" ref="0x2b536e2f94b8"/>
        <function-ref name="setLocalDutyCycle" scoped="" ref="0x2b536e2f9640"/>
        <function-ref name="setRxDutyCycle" scoped="" ref="0x2b536e2f97c8"/>
        <function-ref name="dutyCycleToSleepInterval" scoped="" ref="0x2b536e2f9950"/>
        <function-ref name="getRxSleepInterval" scoped="" ref="0x2b536e2f9ad8"/>
        <function-ref name="setLocalSleepInterval" scoped="" ref="0x2b536e2f9c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x2b536e2fbac0" loc="57:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x2b536e2fbac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x2b536e2fbe10"/>
        <function-ref name="enableCca" scoped="" ref="0x2b536e2fa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e2fc898" loc="55:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e2fc898"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e2fcbe8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiCheckChannel" ref="0x2b536e330168" loc="74:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiCheckChannel" scoped="" ref="0x2b536e330168"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e330ce8"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e32c1f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Squelch" ref="0x2b536e311cb0" loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x2b536e311cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b536e3130a0"/>
        <function-ref name="settled" scoped="" ref="0x2b536e313228"/>
        <function-ref name="adjust" scoped="" ref="0x2b536e3133b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sleepCheck" ref="0x2b536e36a5c8" loc="293:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sleepCheck" scoped="" ref="0x2b536e36a5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e36a918"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e36aaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WakeupTimer" ref="0x2b536e31e818" loc="70:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="WakeupTimer" scoped="" ref="0x2b536e31e818"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e31da18"/>
        <function-ref name="fired" scoped="" ref="0x2b536e327158"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b536e327e48"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b536e3279f8"/>
        <function-ref name="getdt" scoped="" ref="0x2b536e3352e8"/>
        <function-ref name="gett0" scoped="" ref="0x2b536e31de68"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e3275a8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b536e329390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b536e31d448"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b536e329830"/>
        <function-ref name="stop" scoped="" ref="0x2b536e329cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioInit" ref="0x2b536e2f8060" loc="62:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioInit" scoped="" ref="0x2b536e2f8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e2f83b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adjustSquelch" ref="0x2b536e365b60" loc="316:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adjustSquelch" scoped="" ref="0x2b536e365b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e364020"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e3641a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x2b536e3143b0" loc="67:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x2b536e3143b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x2b536e314700"/>
        <function-ref name="biasOn" scoped="" ref="0x2b536e314888"/>
        <function-ref name="getRFPower" scoped="" ref="0x2b536e314a10"/>
        <function-ref name="tuneManual" scoped="" ref="0x2b536e314b98"/>
        <function-ref name="selectLock" scoped="" ref="0x2b536e314d20"/>
        <function-ref name="init" scoped="" ref="0x2b536e304020"/>
        <function-ref name="getLock" scoped="" ref="0x2b536e3041a8"/>
        <function-ref name="coreOn" scoped="" ref="0x2b536e304330"/>
        <function-ref name="txMode" scoped="" ref="0x2b536e3044b8"/>
        <function-ref name="getLOStatus" scoped="" ref="0x2b536e304640"/>
        <function-ref name="rxMode" scoped="" ref="0x2b536e3047c8"/>
        <function-ref name="off" scoped="" ref="0x2b536e304950"/>
        <function-ref name="setRFPower" scoped="" ref="0x2b536e304ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioControl" ref="0x2b536e2f7020" loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioControl" scoped="" ref="0x2b536e2f7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b536e2f7370"/>
        <function-ref name="stop" scoped="" ref="0x2b536e2f74f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiPulseCheck" ref="0x2b536e32c9c8" loc="75:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiPulseCheck" scoped="" ref="0x2b536e32c9c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e32a598"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e32aa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x2b536e2fa2d8" loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x2b536e2fa2d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x2b536e2fa628"/>
        <function-ref name="initial" scoped="" ref="0x2b536e2fa7b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadio" ref="0x2b536e305578" loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x2b536e305578"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x2b536e3058c8"/>
        <function-ref name="listen" scoped="" ref="0x2b536e305a50"/>
        <function-ref name="syncing" scoped="" ref="0x2b536e305bd8"/>
        <function-ref name="rxDone" scoped="" ref="0x2b536e305d60"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x2b536e2f6020"/>
        <function-ref name="idleByte" scoped="" ref="0x2b536e2f61a8"/>
        <function-ref name="cts" scoped="" ref="0x2b536e2f6330"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x2b536e2f64b8"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e2f6640"/>
        <function-ref name="off" scoped="" ref="0x2b536e2f67c8"/>
        <function-ref name="getTxMessage" scoped="" ref="0x2b536e2f6950"/>
        <function-ref name="rx" scoped="" ref="0x2b536e2f6ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2b536e3b62a8" loc="62:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e3b62a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e3b65f8"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e3b6780"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e3b6908"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e3b6a90"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e3b6c18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplCC1000Spi" ref="0x2b536e3d0b90" loc="69:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x2b536e3d0b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x2b536e3cf020"/>
        <function-ref name="initSlave" scoped="" ref="0x2b536e3cf1a8"/>
        <function-ref name="disableIntr" scoped="" ref="0x2b536e3cf330"/>
        <function-ref name="writeByte" scoped="" ref="0x2b536e3cf4b8"/>
        <function-ref name="enableIntr" scoped="" ref="0x2b536e3cf640"/>
        <function-ref name="txMode" scoped="" ref="0x2b536e3cf7c8"/>
        <function-ref name="readByte" scoped="" ref="0x2b536e3cf950"/>
        <function-ref name="rxMode" scoped="" ref="0x2b536e3cfad8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e3cfc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x2b536e3b84d8" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2b536e3b84d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e3b8828"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e3b89b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e3b8b38"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e3b8cc0"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e3b8e48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e3bb760" loc="57:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e3bb760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e3bbab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiRx" ref="0x2b536e3ce100" loc="71:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiRx" scoped="" ref="0x2b536e3ce100"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e3cec80"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e3cd130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2b536e3b7108" loc="60:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2b536e3b7108"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e3b7458"/>
        <function-ref name="receive" scoped="" ref="0x2b536e3b75e0"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e3b7768"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketSent" ref="0x2b536e429bd0" loc="376:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketSent" scoped="" ref="0x2b536e429bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e4280a0"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e428228"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x2b536e3d27e0" loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2b536e3d27e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2b536e3d2b30"/>
        <function-ref name="noAck" scoped="" ref="0x2b536e3d2cb8"/>
        <function-ref name="wasAcked" scoped="" ref="0x2b536e3d2e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x2b536e3d11e8" loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x2b536e3d11e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x2b536e3d1538"/>
        <function-ref name="biasOn" scoped="" ref="0x2b536e3d16c0"/>
        <function-ref name="getRFPower" scoped="" ref="0x2b536e3d1848"/>
        <function-ref name="tuneManual" scoped="" ref="0x2b536e3d19d0"/>
        <function-ref name="selectLock" scoped="" ref="0x2b536e3d1b58"/>
        <function-ref name="init" scoped="" ref="0x2b536e3d1ce0"/>
        <function-ref name="getLock" scoped="" ref="0x2b536e3d1e68"/>
        <function-ref name="coreOn" scoped="" ref="0x2b536e3d0020"/>
        <function-ref name="txMode" scoped="" ref="0x2b536e3d01a8"/>
        <function-ref name="getLOStatus" scoped="" ref="0x2b536e3d0330"/>
        <function-ref name="rxMode" scoped="" ref="0x2b536e3d04b8"/>
        <function-ref name="off" scoped="" ref="0x2b536e3d0640"/>
        <function-ref name="setRFPower" scoped="" ref="0x2b536e3d07c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketReceived" ref="0x2b536e455908" loc="547:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketReceived" scoped="" ref="0x2b536e455908"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e455c58"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e455de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteRadio" ref="0x2b536e3b5020" loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x2b536e3b5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x2b536e3b5370"/>
        <function-ref name="listen" scoped="" ref="0x2b536e3b54f8"/>
        <function-ref name="syncing" scoped="" ref="0x2b536e3b5680"/>
        <function-ref name="rxDone" scoped="" ref="0x2b536e3b5808"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x2b536e3b5990"/>
        <function-ref name="idleByte" scoped="" ref="0x2b536e3b5b18"/>
        <function-ref name="cts" scoped="" ref="0x2b536e3b5ca0"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x2b536e3b5e28"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e3d2020"/>
        <function-ref name="off" scoped="" ref="0x2b536e3d21a8"/>
        <function-ref name="getTxMessage" scoped="" ref="0x2b536e3d2330"/>
        <function-ref name="rx" scoped="" ref="0x2b536e3d24b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x2b536e3bbd60" loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x2b536e3bbd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b536e3b80d8"/>
        <function-ref name="stop" scoped="" ref="0x2b536e3b8260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioTimeStamping" ref="0x2b536e3b7a60" loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioTimeStamping" scoped="" ref="0x2b536e3b7a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioTimeStamping"/>
      </instance>
      <interface-functions>
        <function-ref name="transmittedSFD" scoped="" ref="0x2b536e3b7db0"/>
        <function-ref name="receivedSFD" scoped="" ref="0x2b536e3b6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualRssi" ref="0x2b536e49ae28" loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualRssi" scoped="" ref="0x2b536e49ae28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e499a18"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e494020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b536e49a020" loc="51:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b536e49a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e49a370"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b536e49a4f8"/>
        <function-ref name="request" scoped="" ref="0x2b536e49a680"/>
        <function-ref name="granted" scoped="" ref="0x2b536e49a808"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e49a990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Rssi" ref="0x2b536e47c050" loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Rssi" scoped="" ref="0x2b536e47c050"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e47cbd0"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e49b088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e4a21e8" loc="43:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e4a21e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e4a2538"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Squelch" ref="0x2b536e4a2808" loc="44:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x2b536e4a2808"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b536e4a2b58"/>
        <function-ref name="settled" scoped="" ref="0x2b536e4a2ce0"/>
        <function-ref name="adjust" scoped="" ref="0x2b536e4a2e68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x2b536e4ac080" loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x2b536e4ac080"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df4e078"/>
            <typename><typedef-ref name="TMicro" ref="0x2b536df4e3d0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x2b536e4acdd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC" ref="0x2b536e4ad318" loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC" scoped="" ref="0x2b536e4ad318"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e4ad668"/>
        <function-ref name="read" scoped="" ref="0x2b536e4ad7f0"/>
        <function-ref name="write" scoped="" ref="0x2b536e4ad978"/>
        <function-ref name="getLOCK" scoped="" ref="0x2b536e4adb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Control" ref="0x2b536e47d7a8" loc="43:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x2b536e47d7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x2b536e47daf8"/>
        <function-ref name="biasOn" scoped="" ref="0x2b536e47dc80"/>
        <function-ref name="getRFPower" scoped="" ref="0x2b536e47de08"/>
        <function-ref name="tuneManual" scoped="" ref="0x2b536e4ae020"/>
        <function-ref name="selectLock" scoped="" ref="0x2b536e4ae1a8"/>
        <function-ref name="init" scoped="" ref="0x2b536e4ae330"/>
        <function-ref name="getLock" scoped="" ref="0x2b536e4ae4b8"/>
        <function-ref name="coreOn" scoped="" ref="0x2b536e4ae640"/>
        <function-ref name="txMode" scoped="" ref="0x2b536e4ae7c8"/>
        <function-ref name="getLOStatus" scoped="" ref="0x2b536e4ae950"/>
        <function-ref name="rxMode" scoped="" ref="0x2b536e4aead8"/>
        <function-ref name="off" scoped="" ref="0x2b536e4aec60"/>
        <function-ref name="setRFPower" scoped="" ref="0x2b536e4aede8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x2b536e52d908" loc="39:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x2b536e52d908"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x2b536e52dc58"/>
        <function-ref name="initSlave" scoped="" ref="0x2b536e52dde0"/>
        <function-ref name="disableIntr" scoped="" ref="0x2b536e52c020"/>
        <function-ref name="writeByte" scoped="" ref="0x2b536e52c1a8"/>
        <function-ref name="enableIntr" scoped="" ref="0x2b536e52c330"/>
        <function-ref name="txMode" scoped="" ref="0x2b536e52c4b8"/>
        <function-ref name="readByte" scoped="" ref="0x2b536e52c640"/>
        <function-ref name="rxMode" scoped="" ref="0x2b536e52c7c8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e52c950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiAdc" ref="0x2b536e5304e0" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiAdc" scoped="" ref="0x2b536e5304e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e52f088"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e52f510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiResource" ref="0x2b536e52fb80" loc="38:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiResource" scoped="" ref="0x2b536e52fb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e52d020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b536e52d1a8"/>
        <function-ref name="request" scoped="" ref="0x2b536e52d330"/>
        <function-ref name="granted" scoped="" ref="0x2b536e52d4b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e52d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x2b536e52cbf8" loc="40:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x2b536e52cbf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e52b020"/>
        <function-ref name="read" scoped="" ref="0x2b536e52b1a8"/>
        <function-ref name="write" scoped="" ref="0x2b536e52b330"/>
        <function-ref name="getLOCK" scoped="" ref="0x2b536e52b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b536e6ae020" loc="28:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536e6ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b536e6ae370"/>
        <function-ref name="configure" scoped="" ref="0x2b536e6ae4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b536e6b0128" loc="24:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b536e6b0128"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e6b0ca8"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e6af190"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b536e6af748" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b536e6af748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b536e6afa98"/>
        <function-ref name="getChannel" scoped="" ref="0x2b536e6afc20"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b536e6afda8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b536e6b1438" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b536e6b1438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e6b1788"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b536e6b1910"/>
        <function-ref name="request" scoped="" ref="0x2b536e6b1a98"/>
        <function-ref name="granted" scoped="" ref="0x2b536e6b1c20"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e6b1da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b536e53ca00" loc="18:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b536e53ca00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e53f578"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e53f9c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b536e53e620" loc="19:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b536e53e620"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e53a1d0"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e53a658"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b536e539208" loc="22:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b536e539208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b536e539558"/>
        <function-ref name="getChannel" scoped="" ref="0x2b536e5396e0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b536e539868"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b536e538050" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b536e538050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e5383a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b536e538528"/>
        <function-ref name="request" scoped="" ref="0x2b536e5386b0"/>
        <function-ref name="granted" scoped="" ref="0x2b536e538838"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e5389c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b536e554890" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536e554890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b536e554be0"/>
        <function-ref name="configure" scoped="" ref="0x2b536e554d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b536e54b9b0" loc="47:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b536e54b9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b536e54bd00"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e554020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b536e551cb8" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b536e551cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b536e5550a0"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e555228"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e5553b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b536e537af0" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b536e537af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e537e40"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b536e534020"/>
        <function-ref name="request" scoped="" ref="0x2b536e5341a8"/>
        <function-ref name="granted" scoped="" ref="0x2b536e534330"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e5344b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e550980" loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e550980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e550cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b536e5479d8" loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b536e5479d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b536e547d28"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e546020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b536e547080" loc="67:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b536e547080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b536e5473d0"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e547558"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e5476e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x2b536e55a888" loc="71:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b536e55a888"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b536e55abd8"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b536e55ad60"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b536e567020"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b536e5671a8"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b536e567330"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b536e5674b8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b536e567640"/>
        <function-ref name="isComplete" scoped="" ref="0x2b536e5677c8"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e567950"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b536e567ad8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b536e567c60"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b536e567de8"/>
        <function-ref name="startConversion" scoped="" ref="0x2b536e566020"/>
        <function-ref name="isStarted" scoped="" ref="0x2b536e5662a8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b536e566430"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b536e5665b8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b536e566740"/>
        <function-ref name="getValue" scoped="" ref="0x2b536e5668c8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e566a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2b536e544860" loc="66:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b536e544860"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b536e544bb0"/>
        <function-ref name="stop" scoped="" ref="0x2b536e544d38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x2b536e566d30" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b536e566d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b536e5590d8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b536e559260"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b536e5593e8"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b536e559570"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b536e5596f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b536e594020" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b536e594020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b536e594370"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b536e5944f8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b536e594680"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b536e594808"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b536e594990"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b536e594b18"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b536e594ca0"/>
        <function-ref name="isComplete" scoped="" ref="0x2b536e594e28"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e593020"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b536e5931a8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b536e593330"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b536e5934b8"/>
        <function-ref name="startConversion" scoped="" ref="0x2b536e593640"/>
        <function-ref name="isStarted" scoped="" ref="0x2b536e5938c8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b536e593a50"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b536e593bd8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b536e593d60"/>
        <function-ref name="getValue" scoped="" ref="0x2b536e592020"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e5921a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b536e592db8" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b536e592db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b536e58f170"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b536e58f2f8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b536e58f480"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b536e58f608"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b536e58f790"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b536e58f918"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b536e58faa0"/>
        <function-ref name="isComplete" scoped="" ref="0x2b536e58fc28"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e58fdb0"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b536e58e020"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b536e58e1a8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b536e58e330"/>
        <function-ref name="startConversion" scoped="" ref="0x2b536e58e4b8"/>
        <function-ref name="isStarted" scoped="" ref="0x2b536e58e740"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b536e58e8c8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b536e58ea50"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b536e58ebd8"/>
        <function-ref name="getValue" scoped="" ref="0x2b536e58ed60"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e58d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2b536e58d330" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b536e58d330"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b536e58d680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b536e657698" loc="82:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b536e657698"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b536e657a08"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b536e657b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b536e6543c8" loc="86:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536e6543c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b536e654738"/>
        <function-ref name="configure" scoped="" ref="0x2b536e6548c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b536e657dd8" loc="83:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536e657dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e656170"/>
        <function-ref name="requested" scoped="" ref="0x2b536e6562f8"/>
        <function-ref name="granted" scoped="" ref="0x2b536e656480"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e656608"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b536e656790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b536e658840" loc="81:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b536e658840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e658bb0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b536e658d38"/>
        <function-ref name="request" scoped="" ref="0x2b536e657020"/>
        <function-ref name="granted" scoped="" ref="0x2b536e6571a8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e657330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b536e6569d8" loc="84:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b536e6569d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b536e656d28"/>
        <function-ref name="userId" scoped="" ref="0x2b536e654020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536ec4e408" loc="34:/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536ec4e408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536ec4e758"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x2b536ec4e9e0" loc="35:/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b536ec4e9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b536ec4ed30"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b536ec4d020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b536ec4d1a8"/>
        <function-ref name="dequeue" scoped="" ref="0x2b536ec4d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b536ec4a9a8" loc="55:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b536ec4a9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b536ec4ad18"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b536ec49020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b536ec486f8" loc="60:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b536ec486f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b536ec48a68"/>
        <function-ref name="configure" scoped="" ref="0x2b536ec48bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2b536ec48e78" loc="61:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2b536ec48e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b536ec471f8"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b536ec47380"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b536ec47508"/>
        <function-ref name="dequeue" scoped="" ref="0x2b536ec47690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b536ec49268" loc="56:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536ec49268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536ec495b8"/>
        <function-ref name="requested" scoped="" ref="0x2b536ec49740"/>
        <function-ref name="granted" scoped="" ref="0x2b536ec498c8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536ec49a50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b536ec49bd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2b536ec478d8" loc="62:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2b536ec478d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2b536ec47c28"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2b536ec47db0"/>
        <function-ref name="led1On" scoped="" ref="0x2b536ec46020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2b536ec461a8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2b536ec46330"/>
        <function-ref name="get" scoped="" ref="0x2b536ec464b8"/>
        <function-ref name="led1Off" scoped="" ref="0x2b536ec46640"/>
        <function-ref name="led0On" scoped="" ref="0x2b536ec46c60"/>
        <function-ref name="set" scoped="" ref="0x2b536ec46950"/>
        <function-ref name="led2On" scoped="" ref="0x2b536ec467c8"/>
        <function-ref name="led2Off" scoped="" ref="0x2b536ec46ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b536ec4bbb8" loc="54:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b536ec4bbb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536ec4a020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b536ec4a1a8"/>
        <function-ref name="request" scoped="" ref="0x2b536ec4a330"/>
        <function-ref name="granted" scoped="" ref="0x2b536ec4a4b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536ec4a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b536ec49e20" loc="57:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b536ec49e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b536ec481a8"/>
        <function-ref name="userId" scoped="" ref="0x2b536ec48330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2b536ec45020" loc="74:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2b536ec45020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536ec45370"/>
        <function-ref name="runTask" scoped="" ref="0x2b536ec454f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b536e6513f0" loc="62:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b536e6513f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b536e651740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b536e651988" loc="63:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536e651988"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e651cd8"/>
        <function-ref name="requested" scoped="" ref="0x2b536e651e60"/>
        <function-ref name="granted" scoped="" ref="0x2b536e663020"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e6631a8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b536e663330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b536e652c30" loc="60:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b536e652c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b536e651020"/>
        <function-ref name="stop" scoped="" ref="0x2b536e6511a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b536e663578" loc="64:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b536e663578"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b536e6638c8"/>
        <function-ref name="userId" scoped="" ref="0x2b536e663a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b536ec970e0" loc="52:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b536ec970e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b536ec97430"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b536ec97678" loc="53:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b536ec97678"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536ec979c8"/>
        <function-ref name="requested" scoped="" ref="0x2b536ec97b50"/>
        <function-ref name="granted" scoped="" ref="0x2b536ec97cd8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536ec97e60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b536ec96020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b536ec98958" loc="50:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b536ec98958"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b536ec98ca8"/>
        <function-ref name="stop" scoped="" ref="0x2b536ec98e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b536ec96268" loc="54:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b536ec96268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b536ec965b8"/>
        <function-ref name="userId" scoped="" ref="0x2b536ec96740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b536e682020" loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b536e682020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e682b68"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e681020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b536e681c38" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b536e681c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e680820"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e680ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b536e67d208" loc="53:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b536e67d208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b536e67d558"/>
        <function-ref name="getChannel" scoped="" ref="0x2b536e67d6e0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b536e67d868"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x2b536e67e358" loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b536e67e358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b536e67e6a8"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e67e830"/>
        <function-ref name="dataReady" scoped="" ref="0x2b536e67e9b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x2b536e6940c0" loc="103:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x2b536e6940c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e694410"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e694598"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b536e6aa020" loc="24:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b536e6aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e6aab88"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e6ba020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x2b536e6ba860" loc="26:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x2b536e6ba860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b536e6b9458"/>
        <function-ref name="readDone" scoped="" ref="0x2b536e6b98c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b536e6b7020" loc="27:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b536e6b7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b536e6b7390"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b536e6b7518"/>
        <function-ref name="request" scoped="" ref="0x2b536e6b76a0"/>
        <function-ref name="granted" scoped="" ref="0x2b536e6b7828"/>
        <function-ref name="isOwner" scoped="" ref="0x2b536e6b79b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x2b536e6d1a50" loc="35:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2b536e6d1a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2b536e6d1da0"/>
        <function-ref name="rand32" scoped="" ref="0x2b536e6d0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x2b536e6cf980" loc="34:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x2b536e6cf980"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e6d1528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e531c50" loc="33:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e531c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e6d2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x2b536e6ca5e8" loc="34:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2b536e6ca5e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2b536e6ca938"/>
        <function-ref name="rand32" scoped="" ref="0x2b536e6caac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x2b536e6cb528" loc="33:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x2b536e6cb528"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e6ca0c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e6d0b40" loc="32:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e6d0b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e6cb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x2b536e6c4100" loc="37:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
      <component-ref qname="RandomMlcgP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2b536e6c4100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2b536e6c4450"/>
        <function-ref name="rand32" scoped="" ref="0x2b536e6c45d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x2b536e6c6020" loc="36:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
      <component-ref qname="RandomMlcgP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x2b536e6c6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e6c6b68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e6c96c0" loc="35:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
      <component-ref qname="RandomMlcgP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e6c96c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e6c9a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b536e6db128" loc="37:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
      <component-ref qname="CC1000CsmaRadioC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b536e6db128"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e8aa5f0"/>
        <function-ref name="fired" scoped="" ref="0x2b536e8aca48"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b536e8ab8c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b536e8ab470"/>
        <function-ref name="getdt" scoped="" ref="0x2b536e8a9020"/>
        <function-ref name="gett0" scoped="" ref="0x2b536e8aaa40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e8ab020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b536e6dbc70"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b536e8aa020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b536e8ac158"/>
        <function-ref name="stop" scoped="" ref="0x2b536e8ac5f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2b536e6da9a8" loc="38:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2b536e6da9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e6d6bc0"/>
        <function-ref name="fired" scoped="" ref="0x2b536e6d82e8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b536e6d6020"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b536e6d8b88"/>
        <function-ref name="getdt" scoped="" ref="0x2b536e6d54d8"/>
        <function-ref name="gett0" scoped="" ref="0x2b536e6d5088"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e6d8738"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b536e6d9528"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b536e6d65f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b536e6d99c8"/>
        <function-ref name="stop" scoped="" ref="0x2b536e6d9e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2b536e6fa020" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2b536e6fa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e6f72b8"/>
        <function-ref name="fired" scoped="" ref="0x2b536e6f9978"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b536e6f86c8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b536e6f8278"/>
        <function-ref name="getdt" scoped="" ref="0x2b536e6f7b58"/>
        <function-ref name="gett0" scoped="" ref="0x2b536e6f7708"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e6f9dc8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b536e6fab68"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b536e6f8c98"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b536e6f9088"/>
        <function-ref name="stop" scoped="" ref="0x2b536e6f9528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2b536e6f2590" loc="36:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2b536e6f2590"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b536e6f4150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e6fc300" loc="34:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e6fc300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e6fc650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x2b536e7087b8" loc="29:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x2b536e7087b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b536e70b578"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b536e707020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b536e70ba00"/>
        <function-ref name="overflow" scoped="" ref="0x2b536e7074a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e6f1b88" loc="27:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e6f1b88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e6ee020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x2b536e710748" loc="28:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x2b536e710748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e70e020"/>
        <function-ref name="fired" scoped="" ref="0x2b536e6ec020"/>
        <function-ref name="startAt" scoped="" ref="0x2b536e6ec930"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e6ec4a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b536e70e4a8"/>
        <function-ref name="start" scoped="" ref="0x2b536e6ed578"/>
        <function-ref name="stop" scoped="" ref="0x2b536e6eda50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2b536e7fa998" loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b536e7fa998"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e7f6020"/>
        <function-ref name="fired" scoped="" ref="0x2b536e7f80c0"/>
        <function-ref name="startAt" scoped="" ref="0x2b536e7f89d0"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e7f8548"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b536e7f64a8"/>
        <function-ref name="start" scoped="" ref="0x2b536e7f9730"/>
        <function-ref name="stop" scoped="" ref="0x2b536e7f9c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536e7fa1f0" loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536e7fa1f0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x2b536ded1d18"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x2b536ded1d18"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536e7fa540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2b536e7f6a90" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b536e7f6a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b536e7f5828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b536e7f4190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b536e7f5cb0"/>
        <function-ref name="overflow" scoped="" ref="0x2b536e7f4618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x2b536ecb6e70" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b536ecb6e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b536ecb41e8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b536ecb4370"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b536ecb44f8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b536ecb4680"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b536ecb4808"/>
        <function-ref name="setControl" scoped="" ref="0x2b536ecb4990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2b536ec7ebe0" loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b536ec7ebe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536ecbd270"/>
        <function-ref name="fired" scoped="" ref="0x2b536ec7c310"/>
        <function-ref name="startAt" scoped="" ref="0x2b536ec7cc20"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536ec7c798"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b536ecbd6f8"/>
        <function-ref name="start" scoped="" ref="0x2b536ec7d970"/>
        <function-ref name="stop" scoped="" ref="0x2b536ec7de48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b536ec7e438" loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b536ec7e438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b536ec7e788"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2b536ecbdce0" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b536ecbdce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b536ecbcac0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b536ecbb4a8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b536ecbb020"/>
        <function-ref name="overflow" scoped="" ref="0x2b536ecbb930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x2b536ecb1db0" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2b536ecb1db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2b536ecb0170"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b536ecb02f8"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2b536ecb0480"/>
        <function-ref name="countBusy" scoped="" ref="0x2b536ecb0608"/>
        <function-ref name="getAssr" scoped="" ref="0x2b536ecb0790"/>
        <function-ref name="setAssr" scoped="" ref="0x2b536ecb0918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x2b536ecb4d20" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b536ecb4d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b536ecb1510"/>
        <function-ref name="fired" scoped="" ref="0x2b536ecb22b0"/>
        <function-ref name="get" scoped="" ref="0x2b536ecb38f0"/>
        <function-ref name="reset" scoped="" ref="0x2b536ecb2738"/>
        <function-ref name="isOn" scoped="" ref="0x2b536ecb1998"/>
        <function-ref name="set" scoped="" ref="0x2b536ecb3d78"/>
        <function-ref name="start" scoped="" ref="0x2b536ecb2bc0"/>
        <function-ref name="stop" scoped="" ref="0x2b536ecb1088"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x2b536ecba020" loc="30:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b536ecba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b536ecb60f8"/>
        <function-ref name="test" scoped="" ref="0x2b536ecb77a8"/>
        <function-ref name="get" scoped="" ref="0x2b536ecbaba0"/>
        <function-ref name="setScale" scoped="" ref="0x2b536ecb6580"/>
        <function-ref name="getScale" scoped="" ref="0x2b536ecb6a58"/>
        <function-ref name="reset" scoped="" ref="0x2b536ecb89e8"/>
        <function-ref name="overflow" scoped="" ref="0x2b536ecb8560"/>
        <function-ref name="isOn" scoped="" ref="0x2b536ecb7c30"/>
        <function-ref name="set" scoped="" ref="0x2b536ecb8088"/>
        <function-ref name="start" scoped="" ref="0x2b536ecb8e70"/>
        <function-ref name="stop" scoped="" ref="0x2b536ecb7320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2b536e789020" loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b536e789020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b536e789370"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b536e7894f8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b536e789680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b536e789808"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b536e789990"/>
        <function-ref name="setControl" scoped="" ref="0x2b536e789b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x2b536e784228" loc="50:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2b536e784228"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2b536e784578"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b536e784700"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2b536e784888"/>
        <function-ref name="countBusy" scoped="" ref="0x2b536e784a10"/>
        <function-ref name="getAssr" scoped="" ref="0x2b536e784b98"/>
        <function-ref name="setAssr" scoped="" ref="0x2b536e784d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2b536e788020" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b536e788020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b536e7867a8"/>
        <function-ref name="fired" scoped="" ref="0x2b536e787560"/>
        <function-ref name="get" scoped="" ref="0x2b536e788ba0"/>
        <function-ref name="reset" scoped="" ref="0x2b536e7879e8"/>
        <function-ref name="isOn" scoped="" ref="0x2b536e786c30"/>
        <function-ref name="set" scoped="" ref="0x2b536e787088"/>
        <function-ref name="start" scoped="" ref="0x2b536e787e70"/>
        <function-ref name="stop" scoped="" ref="0x2b536e786320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b536e791de8" loc="47:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b536e791de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b536e78b0f8"/>
        <function-ref name="test" scoped="" ref="0x2b536e78c798"/>
        <function-ref name="get" scoped="" ref="0x2b536e78ea18"/>
        <function-ref name="setScale" scoped="" ref="0x2b536e78b580"/>
        <function-ref name="getScale" scoped="" ref="0x2b536e78ba58"/>
        <function-ref name="reset" scoped="" ref="0x2b536e78d980"/>
        <function-ref name="overflow" scoped="" ref="0x2b536e78d4f8"/>
        <function-ref name="isOn" scoped="" ref="0x2b536e78cc20"/>
        <function-ref name="set" scoped="" ref="0x2b536e78d020"/>
        <function-ref name="start" scoped="" ref="0x2b536e78de08"/>
        <function-ref name="stop" scoped="" ref="0x2b536e78c310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2b536e7a7d20" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b536e7a7d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b536e7a60a0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b536e7a6228"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b536e7a63b0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b536e7a6538"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b536e7a66c0"/>
        <function-ref name="setControl" scoped="" ref="0x2b536e7a6848"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x2b536e7a2e18" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b536e7a2e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b536e7a11a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x2b536e7a1558" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2b536e7a1558"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2b536e7a18a8"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b536e7a1a30"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2b536e7a1bb8"/>
        <function-ref name="countBusy" scoped="" ref="0x2b536e7a1d40"/>
        <function-ref name="getAssr" scoped="" ref="0x2b536e7a0020"/>
        <function-ref name="setAssr" scoped="" ref="0x2b536e7a01a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2b536e7a6d10" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b536e7a6d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b536e7a2510"/>
        <function-ref name="fired" scoped="" ref="0x2b536e7a42b0"/>
        <function-ref name="get" scoped="" ref="0x2b536e7a58f0"/>
        <function-ref name="reset" scoped="" ref="0x2b536e7a4738"/>
        <function-ref name="isOn" scoped="" ref="0x2b536e7a2998"/>
        <function-ref name="set" scoped="" ref="0x2b536e7a5d78"/>
        <function-ref name="start" scoped="" ref="0x2b536e7a4bc0"/>
        <function-ref name="stop" scoped="" ref="0x2b536e7a2088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b536e783cf8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b536e783cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b536e7a9e20"/>
        <function-ref name="test" scoped="" ref="0x2b536e7a9510"/>
        <function-ref name="get" scoped="" ref="0x2b536e7ab8f0"/>
        <function-ref name="setScale" scoped="" ref="0x2b536e7a7310"/>
        <function-ref name="getScale" scoped="" ref="0x2b536e7a77e8"/>
        <function-ref name="reset" scoped="" ref="0x2b536e7aa738"/>
        <function-ref name="overflow" scoped="" ref="0x2b536e7aa2b0"/>
        <function-ref name="isOn" scoped="" ref="0x2b536e7a9998"/>
        <function-ref name="set" scoped="" ref="0x2b536e7abd78"/>
        <function-ref name="start" scoped="" ref="0x2b536e7aabc0"/>
        <function-ref name="stop" scoped="" ref="0x2b536e7a9088"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x2b536e820cf0" loc="63:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x2b536e820cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e81f0a0"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e81f228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x2b536e824c70" loc="38:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b536e824c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e820410"/>
        <function-ref name="fired" scoped="" ref="0x2b536e8224a8"/>
        <function-ref name="startAt" scoped="" ref="0x2b536e822db8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e822930"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b536e820898"/>
        <function-ref name="start" scoped="" ref="0x2b536e8239f0"/>
        <function-ref name="stop" scoped="" ref="0x2b536e822020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b536e829ab0" loc="37:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b536e829ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e825d60"/>
        <function-ref name="fired" scoped="" ref="0x2b536e827470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b536e8251c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b536e827d10"/>
        <function-ref name="getdt" scoped="" ref="0x2b536e824648"/>
        <function-ref name="gett0" scoped="" ref="0x2b536e8241f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e8278c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b536e828620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b536e825790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b536e828ac0"/>
        <function-ref name="stop" scoped="" ref="0x2b536e827020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x2b536e891618" loc="60:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x2b536e891618"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e891968"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e891af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x2b536e8665a0" loc="38:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x2b536e8665a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e8928f0"/>
        <function-ref name="fired" scoped="" ref="0x2b536e894020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b536e894d10"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b536e8948c0"/>
        <function-ref name="getdt" scoped="" ref="0x2b536e8911c0"/>
        <function-ref name="gett0" scoped="" ref="0x2b536e892d40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e894470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b536e865118"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b536e892320"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b536e8655b8"/>
        <function-ref name="stop" scoped="" ref="0x2b536e865a58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b536e86c0c8" loc="37:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b536e86c0c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b536e868610"/>
        <function-ref name="fired" scoped="" ref="0x2b536e86ba48"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b536e869900"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b536e869490"/>
        <function-ref name="getdt" scoped="" ref="0x2b536e866020"/>
        <function-ref name="gett0" scoped="" ref="0x2b536e868a80"/>
        <function-ref name="isRunning" scoped="" ref="0x2b536e869020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b536e86cc30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b536e868020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b536e86b118"/>
        <function-ref name="stop" scoped="" ref="0x2b536e86b5d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2b536e88e7f8" loc="37:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2b536e88e7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b536e88d3a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2b536e88d9d0" loc="38:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b536e88d9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df40150"/>
            <typename><typedef-ref name="TMilli" ref="0x2b536df404a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b536e884768"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b536e8820c0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b536e884bf0"/>
        <function-ref name="overflow" scoped="" ref="0x2b536e882548"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x2b536e8a1de8" loc="43:/opt/tinyos-2.0.2/tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x2b536e8a1de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x2b536e8a4170"/>
        <function-ref name="changed" scoped="" ref="0x2b536e8a42f8"/>
        <function-ref name="amGroup" scoped="" ref="0x2b536e8a4480"/>
        <function-ref name="setAddress" scoped="" ref="0x2b536e8a4608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x2b536e8a5838" loc="40:/opt/tinyos-2.0.2/tos/platforms/mica/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x2b536e8a5838"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b536df4e078"/>
            <typename><typedef-ref name="TMicro" ref="0x2b536df4e3d0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x2b536e8c15e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2b536e9317a8" loc="41:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <component-ref qname="BlinkAppC.AttestationResponseSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2b536e9317a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e931af8"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e931c80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e931e08"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e930020"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e9301a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2b536e9303f0" loc="42:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <component-ref qname="BlinkAppC.AttestationResponseSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e9303f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e930740"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e9308c8"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e930a50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e930bd8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e930d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2b536e92f020" loc="43:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <component-ref qname="BlinkAppC.AttestationResponseSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b536e92f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b536e92f370"/>
        <function-ref name="source" scoped="" ref="0x2b536e92f4f8"/>
        <function-ref name="address" scoped="" ref="0x2b536e92f680"/>
        <function-ref name="destination" scoped="" ref="0x2b536e92f808"/>
        <function-ref name="setSource" scoped="" ref="0x2b536e92f990"/>
        <function-ref name="setDestination" scoped="" ref="0x2b536e92fb18"/>
        <function-ref name="type" scoped="" ref="0x2b536e92fca0"/>
        <function-ref name="setType" scoped="" ref="0x2b536e92fe28"/>
        <function-ref name="isForMe" scoped="" ref="0x2b536e92e020"/>
        <function-ref name="setGroup" scoped="" ref="0x2b536e92e1a8"/>
        <function-ref name="localGroup" scoped="" ref="0x2b536e92e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x2b536e92e5b8" loc="44:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <component-ref qname="BlinkAppC.AttestationResponseSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x2b536e92e5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2b536e92e908"/>
        <function-ref name="noAck" scoped="" ref="0x2b536e92ea90"/>
        <function-ref name="wasAcked" scoped="" ref="0x2b536e92ec18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2b536ed17020" loc="36:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BlinkAppC.AttestationResponseSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2b536ed17020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536ed17370"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536ed174f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536ed17680"/>
        <function-ref name="cancel" scoped="" ref="0x2b536ed17808"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536ed17990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x2b536ed17c38" loc="38:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BlinkAppC.AttestationResponseSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2b536ed17c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536ed16020"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536ed161a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536ed16330"/>
        <function-ref name="cancel" scoped="" ref="0x2b536ed164b8"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536ed16640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x2b536ed16888" loc="39:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BlinkAppC.AttestationResponseSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b536ed16888"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b536ed16bd8"/>
        <function-ref name="source" scoped="" ref="0x2b536ed16d60"/>
        <function-ref name="address" scoped="" ref="0x2b536ed15020"/>
        <function-ref name="destination" scoped="" ref="0x2b536ed151a8"/>
        <function-ref name="setSource" scoped="" ref="0x2b536ed15330"/>
        <function-ref name="setDestination" scoped="" ref="0x2b536ed154b8"/>
        <function-ref name="type" scoped="" ref="0x2b536ed15640"/>
        <function-ref name="setType" scoped="" ref="0x2b536ed157c8"/>
        <function-ref name="isForMe" scoped="" ref="0x2b536ed15950"/>
        <function-ref name="setGroup" scoped="" ref="0x2b536ed15ad8"/>
        <function-ref name="localGroup" scoped="" ref="0x2b536ed15c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x2b536e8eeb88" loc="35:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2b536e8eeb88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e8eb020"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e8eb1a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e8eb330"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e8eb4b8"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e8eb640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x2b536e93d3e8" loc="40:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2b536e93d3e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e93d758"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e93d8e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e93da68"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e93dbf0"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e93dd78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x2b536e93e660" loc="38:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2b536e93e660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b536e93e9d0"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e93eb58"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e93ece0"/>
        <function-ref name="cancel" scoped="" ref="0x2b536e93ee68"/>
        <function-ref name="sendDone" scoped="" ref="0x2b536e93d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x2b536e93b578" loc="42:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e93b578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e93b8c8"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e93ba50"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e93bbd8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e93bd60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e93a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x2b536e93a2e8" loc="161:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x2b536e93a2e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e93a638"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e93a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x2b536e93aa88" loc="118:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x2b536e93aa88"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b536e93add8"/>
        <function-ref name="runTask" scoped="" ref="0x2b536e939020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x2b536e93c020" loc="41:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b536e93c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b536e93c370"/>
        <function-ref name="source" scoped="" ref="0x2b536e93c4f8"/>
        <function-ref name="address" scoped="" ref="0x2b536e93c680"/>
        <function-ref name="destination" scoped="" ref="0x2b536e93c808"/>
        <function-ref name="setSource" scoped="" ref="0x2b536e93c990"/>
        <function-ref name="setDestination" scoped="" ref="0x2b536e93cb18"/>
        <function-ref name="type" scoped="" ref="0x2b536e93cca0"/>
        <function-ref name="setType" scoped="" ref="0x2b536e93ce28"/>
        <function-ref name="isForMe" scoped="" ref="0x2b536e93b020"/>
        <function-ref name="setGroup" scoped="" ref="0x2b536e93b1a8"/>
        <function-ref name="localGroup" scoped="" ref="0x2b536e93b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2b536e956080" loc="38:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
      <component-ref qname="BlinkAppC.AttestationRequestReceiver"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2b536e956080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2b536e9563d0"/>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e956558"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e9566e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2b536e956868"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2b536e9569f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2b536e9577a8" loc="37:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
      <component-ref qname="BlinkAppC.AttestationRequestReceiver"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2b536e9577a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2b536e957af8"/>
        <function-ref name="receive" scoped="" ref="0x2b536e957c80"/>
        <function-ref name="getPayload" scoped="" ref="0x2b536e957e08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2b536e956c38" loc="39:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
      <component-ref qname="BlinkAppC.AttestationRequestReceiver"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2b536e956c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2b536e955020"/>
        <function-ref name="source" scoped="" ref="0x2b536e9551a8"/>
        <function-ref name="address" scoped="" ref="0x2b536e955330"/>
        <function-ref name="destination" scoped="" ref="0x2b536e9554b8"/>
        <function-ref name="setSource" scoped="" ref="0x2b536e955640"/>
        <function-ref name="setDestination" scoped="" ref="0x2b536e9557c8"/>
        <function-ref name="type" scoped="" ref="0x2b536e955950"/>
        <function-ref name="setType" scoped="" ref="0x2b536e955ad8"/>
        <function-ref name="isForMe" scoped="" ref="0x2b536e955c60"/>
        <function-ref name="setGroup" scoped="" ref="0x2b536e955de8"/>
        <function-ref name="localGroup" scoped="" ref="0x2b536e954020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="40:/opt/tinyos-2.0.2/tos/interfaces/Init.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b536dfc80d8" loc="51:/opt/tinyos-2.0.2/tos/interfaces/Init.nc">
        <documentation loc="42:/opt/tinyos-2.0.2/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="39:/opt/tinyos-2.0.2/tos/interfaces/Boot.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2b536dfc1d28" loc="49:/opt/tinyos-2.0.2/tos/interfaces/Boot.nc">
        <documentation loc="40:/opt/tinyos-2.0.2/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x2b536dfce0a8" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x2b536dfcfde0" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x2b536dfc37f8" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x2b536dfd0290" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b536dfd0020" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x2b536dfd0d18" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b536dfd0aa8" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x2b536dfcf590" loc="53:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x2b536dfd86d0" loc="33:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x2b536dfd8d98" loc="34:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x2b536dfd98e8" loc="31:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x2b536dfe4b58" loc="36:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b536dfd8020" loc="32:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x2b536dfe4480" loc="35:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b536dfdcb68" loc="29:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x2b536dfd9258" loc="30:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x2b536e0395d8" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x2b536e032da0" loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x2b536e039db8" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000" loc="48:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
      <documentation loc="38:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <short>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.</short>
        <long>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b536e0306a0" loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="49:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Initialize CC1K pins&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x2b536e02fd10" loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read a value from a CC1000 register.</short>
          <long>&#10; Read a value from a CC1000 register.&#10; @param addr Which CC1000 register&#10; @return Value of register&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x2b536e02faa0" loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x2b536e02f348" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="54:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Write a value to a CC1000 register.</short>
          <long>&#10; Write a value to a CC1000 register.&#10; @param addr Which CC1000 register&#10; @param data Value to write&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x2b536e030d40" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2b536e02f0c8" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOCK" ref="0x2b536e02d4c8" loc="72:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read the state of the CHP_OUT pin&#10; </short>
          <long>&#10; Read the state of the CHP_OUT pin&#10; @return State of CHP_OUT as a boolean (TRUE for high)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000Spi" loc="39:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <short>&#10; Interface to the CC1000 chip's serial bus.</short>
        <long>&#10; Interface to the CC1000 chip's serial bus. This isn't really an SPI,&#10; but the mica2 interface was done using the Atmega128 SPI hardware. Hence&#10; the name.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <function command="" provided="0" name="isBufBusy" ref="0x2b536e054b48" loc="51:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Is write buffer busy with the last transmission?&#10; </short>
          <long>&#10; Is write buffer busy with the last transmission?&#10; @return TRUE if the buffer is busy, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="initSlave" ref="0x2b536e0619b0" loc="74:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="71:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Initialise the interface to the CC1000 bus.</short>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x2b536e061290" loc="69:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Disable CC1000 bus interrupts.</short>
          <long>&#10; Disable CC1000 bus interrupts.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2b536e0543e0" loc="45:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Write a byte to the CC1000 bus.</short>
          <long>&#10; Write a byte to the CC1000 bus.&#10; @param data Byte to write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b536e054170" loc="45:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x2b536e052a88" loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus.</short>
          <long>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus. After this is called, dataReady events will be signaled every&#10; 8 CC1000 data clocks.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x2b536e0600d8" loc="79:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="76:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="readByte" ref="0x2b536e052328" loc="57:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Get the last byte received from the CC1000 bus.</short>
          <long>&#10; Get the last byte received from the CC1000 bus.&#10; @return Last byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x2b536e060808" loc="84:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="81:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b536e05e290" loc="92:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="86:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks.</short>
          <long>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks. &#10; @param data In &#34;receive&#34; mode, the last value received from the CC1000 &#10;   bus.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b536e05e020" loc="92:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b536ded7328" loc="46:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2b536ded5258" loc="61:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2b536ded7a40" loc="54:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2b536dee3ae8" loc="56:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2b536dee2328" loc="64:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="57:/opt/tinyos-2.0.2/tos/interfaces/McuSleep.nc">
      <documentation loc="46:/opt/tinyos-2.0.2/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2b536df88020" loc="59:/opt/tinyos-2.0.2/tos/interfaces/McuSleep.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="42:/opt/tinyos-2.0.2/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2b536dfa7780" loc="54:/opt/tinyos-2.0.2/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="44:/opt/tinyos-2.0.2/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2b536df2a5d8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="38:/opt/tinyos-2.0.2/tos/interfaces/McuPowerState.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2b536dfa80d8" loc="44:/opt/tinyos-2.0.2/tos/interfaces/McuPowerState.nc">
        <documentation loc="39:/opt/tinyos-2.0.2/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="66:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
      <documentation loc="51:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x2b536e219e40" loc="92:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <documentation loc="85:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x2b536e219bd0" loc="92:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x2b536e216290" loc="117:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <documentation loc="111:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x2b536e216020" loc="117:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b536e219258" loc="83:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b536e218680" loc="109:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x2b536e235290" loc="54:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="47:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  msg    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e235020" loc="54:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x2b536e235d10" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="56:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  msg    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e235aa0" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2b536e2486c8" loc="108:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="97:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.  If&#10; len is not NULL, getPayload will return the length of the payload&#10; in it, which is the same as the return value from&#10; payloadLength(). If a protocol does not support variable length&#10; packets, then *len is equal to maxPayloadLength().&#10;&#10; @param msg   the packet&#10; @param len   pointer to where the current payload length should be stored.&#10; @return      a pointer to the packet's data payload for this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e2480c8" loc="108:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b536e248410" loc="108:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x2b536e2327d0" loc="95:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="85:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x2b536e233cb0" loc="83:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="69:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param msg   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e233720" loc="83:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b536e233a30" loc="83:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2b536e246b50" loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="49:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x2b536e246250" loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x2b536e2465b0" loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b536e2468c0" loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2b536e240020" loc="125:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="115:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; The length of this region is maxPayloadLength(). This command&#10; behaves similarly to &#60;tt>Packet.getPayload&#60;/tt> (minus the&#10; length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e242be8" loc="125:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x2b536e2423e0" loc="112:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="102:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b536e244b98" loc="85:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="71:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e244928" loc="85:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2b536e243ab0" loc="99:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="87:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e243508" loc="99:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x2b536e243830" loc="99:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="payloadLength" ref="0x2b536e254290" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
        <documentation loc="81:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This call is identical&#10; to &#60;TT>Packet.payloadLength&#60;/TT>, and is included in Receive as a&#10; convenience.&#10;&#10; @param  msg      the packet&#10; @return          the length of the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e254020" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x2b536e23e5f8" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
        <documentation loc="47:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  msg      the receied packet&#10; @param  payload  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return          a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
              <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e236c30" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x2b536e23e020" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b536e23e330" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2b536e23d6c8" loc="79:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
        <documentation loc="69:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
          <short>&#10; Return point to a protocol's payload region in a packet.</short>
          <long>&#10; Return point to a protocol's payload region in a packet.  If len&#10; is not NULL, getPayload will return the length of the payload in&#10; it. This call is identical to &#60;TT>Packet.getPayload&#60;/TT>, and is&#10; included in Receive as a convenience.&#10;&#10; @param  msg      the packet&#10; @param  len      a pointer to where to store the payload length&#10; @return          a pointer to the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e23d0c8" loc="79:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b536e23d410" loc="79:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
      <function command="" provided="0" name="group" ref="0x2b536e23a4f8" loc="166:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="153:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param amsg the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x2b536e214888"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e23a288" loc="166:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x2b536e22a370" loc="77:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param amsg  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e22a100" loc="77:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x2b536e22de10" loc="57:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x2b536e22b8a0" loc="67:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="59:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param amsg    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e22b630" loc="67:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x2b536e2272a0" loc="110:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e229ba8" loc="110:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x2b536e227020" loc="110:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x2b536e2292a0" loc="92:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="79:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e22ab78" loc="92:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x2b536e229020" loc="92:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x2b536e23cbf0" loc="136:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="127:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  amsg   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e23c980" loc="136:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x2b536e23b928" loc="151:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  amsg    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e23b3a8" loc="151:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x2b536e23b6a8" loc="151:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x2b536e2144d8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x2b536e23c020" loc="125:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="112:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e227c70" loc="125:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x2b536e238388" loc="176:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="168:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param amsg the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2b536e214888"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2b536e23ad98" loc="176:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x2b536e238108" loc="176:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2b536e214888"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x2b536e238bb8" loc="184:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="178:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x2b536e214888"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x2b536e26acc8" loc="48:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param msg - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e26aa58" loc="48:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x2b536e2679f8" loc="60:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param msg - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e267788" loc="60:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x2b536e2655b8" loc="74:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param msg - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e265348" loc="74:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2b536e2815b0" loc="64:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   msg     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e281020" loc="64:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b536e281330" loc="64:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2b536e27e668" loc="114:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="104:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; The length of this region is maxPayloadLength(). This command&#10; behaves similarly to &#60;tt>Packet.getPayload&#60;/tt> (minus the&#10; length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param   msg    the packet&#10; @return         a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e27e3c0" loc="114:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x2b536e27fb80" loc="101:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b536e2802d0" loc="78:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="66:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   msg    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e280060" loc="78:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2b536e27f2a0" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param msg   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e280ba0" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x2b536e27f020" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
      <documentation loc="32:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author David Moss&#10; @author Jonathan Hui&#10;</long>
      </documentation>
      <function command="" provided="0" name="getLocalSleepInterval" ref="0x2b536e2d4a10" loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxDutyCycle" ref="0x2b536e2e7020" loc="113:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="109:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the destination node's duty cycle configured in this message&#10;     in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e2cfd88" loc="113:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sleepIntervalToDutyCycle" ref="0x2b536e2e6698" loc="129:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="123:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; </short>
          <long>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; @param sleepInterval The sleep interval in units of [ms]&#10; @return The duty cycle in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepInterval" ref="0x2b536e2e6428" loc="129:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalDutyCycle" ref="0x2b536e2d3da8" loc="82:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="79:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return this node's radio duty cycle rate, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxSleepInterval" ref="0x2b536e2d1b60" loc="91:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="85:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.&#10; @param msg Pointer to the message that will be sent&#10; @param sleepInterval The receiving node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e2d1548" loc="91:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="sleepIntervalMs" ref="0x2b536e2d18e0" loc="91:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalDutyCycle" ref="0x2b536e2d3410" loc="77:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="60:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].</short>
          <long>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].&#10; For example, to get a 0.05% duty cycle,&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(5);  // or equivalently...&#10;   call LowPowerListening.setDutyCycle(00005);  // for better readability?&#10; &#60;/code>&#10;&#10; For a 100% duty cycle (always on),&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(10000);&#10; &#60;/code>&#10;&#10; This is the equivalent of setting the local sleep interval explicitly.&#10; &#10; @param dutyCycle The duty cycle percentage, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x2b536e2d31a0" loc="77:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxDutyCycle" ref="0x2b536e2cf478" loc="107:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="98:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.&#10; Duty cycle is in units of [percentage*100], i.e. 0.25% duty cycle = 25.&#10; &#10; @param msg Pointer to the message that will be sent&#10; @param dutyCycle The duty cycle of the receiving mote, in units of &#10;     [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e2d0e68" loc="107:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dutyCycle" ref="0x2b536e2cf1f8" loc="107:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dutyCycleToSleepInterval" ref="0x2b536e2e7ab0" loc="121:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="115:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; </short>
          <long>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; @param dutyCycle The duty cycle in units of [percentage*100]&#10; @return The equivalent sleep interval, in units of [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x2b536e2e7840" loc="121:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxSleepInterval" ref="0x2b536e2d0728" loc="96:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="93:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the destination node's sleep interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e2d04b8" loc="96:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalSleepInterval" ref="0x2b536e2d4108" loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="43:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Set this this node's radio sleep interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio sleep interval, in milliseconds.&#10; Once every interval, the node will sleep and perform an Rx check &#10; on the radio.  Setting the sleep interval to 0 will keep the radio&#10; always on.&#10;&#10; This is the equivalent of setting the local duty cycle rate.&#10;&#10; @param sleepIntervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepIntervalMs" ref="0x2b536e2d9e68" loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaControl" loc="29:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
        <short>&#10; Interface for activating/deactivating congestion control.</short>
        <long>&#10; Interface for activating/deactivating congestion control.&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   August 31 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableCca" ref="0x2b536e2c3448" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="36:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Disable congestion control.</short>
          <long>&#10; Disable congestion control.&#10; @return SUCCESS if congestion control disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableCca" ref="0x2b536e2c6c60" loc="34:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="30:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Enable congestion control.</short>
          <long>&#10; Enable congestion control.&#10; @return SUCCESS if congestion control enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaBackoff" loc="29:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
        <short>&#10; Interface for MAC Backoff values from the radio stack.</short>
        <long>&#10; Interface for MAC Backoff values from the radio stack.&#10; Allows application to change the backoff on a per packet basis.&#10; Only used if congestion control is enabled.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function event="" provided="0" name="congestion" ref="0x2b536e2da660" loc="43:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="38:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return backoff time after message m could not be send due to congestion.</short>
          <long>&#10; Return backoff time after message m could not be send due to congestion.&#10; The units are raio dependent.&#10; @return Backoff time after congestion&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x2b536e2da3f0" loc="43:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initial" ref="0x2b536e2c5ba8" loc="36:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return initial backoff time before attempting to send message m.</short>
          <long>&#10; Return initial backoff time before attempting to send message m. The&#10; units are radio dependent.&#10; @return Initial backoff time&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x2b536e2c5938" loc="36:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioTimeStamping" loc="33:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
        <short>&#10; Interface for receiving time stamp information from the radio.</short>
        <long>&#10; Interface for receiving time stamp information from the radio.&#10; This information is also embedded in packet metadata.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   October 10 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="transmittedSFD" ref="0x2b536e2d7380" loc="39:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
        <documentation loc="35:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
          <short> &#10; Provides the time at which start of frame delimiter has been&#10; transmitted: units are in terms of a 32kHz clock.</short>
          <long> &#10; Provides the time at which start of frame delimiter has been&#10; transmitted: units are in terms of a 32kHz clock.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioTimeStamping"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x2b536e2c4d30" loc="39:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
          <variable name="p_msg" ref="0x2b536e2d7100" loc="39:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedSFD" ref="0x2b536e2d7db0" loc="50:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
          <short> &#10; Provides the time at which start of frame delimiter was received:&#10; units are in terms of a 32kHz clock.</short>
          <long> &#10; Provides the time at which start of frame delimiter was received:&#10; units are in terms of a 32kHz clock.  &#60;b>NOTE&#60;/b> that receiving&#10; a receivedSFD() event does NOT mean that a packet will be&#10; received; the transmission may stop, become corrupted, or be&#10; filtered by the physical or link layers.  The number of rxSFD&#10; events will always be great than or equal to the number of&#10; Receive message events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioTimeStamping"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x2b536e2d7b40" loc="50:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="48:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b536e332020" loc="48:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b536e332020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b536e332250" loc="48:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e332250"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x2b536e332ce8" loc="55:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
        <documentation loc="50:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e332250"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b536e332a78" loc="55:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e332250"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="51:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b536e333d08" loc="51:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b536e333d08"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b536e32f5c0" loc="57:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b536e32d2e0" loc="65:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
        <documentation loc="59:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b536e333d08"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b536e32fd08" loc="65:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b536e32d060" loc="65:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b536e333d08"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="29:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x2b536e3287b8" loc="41:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
        <documentation loc="37:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x2b536e328020" loc="35:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
        <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Squelch" loc="34:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
        <short>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; </short>
        <long>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="get" ref="0x2b536e3111d8" loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="42:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Return current estimated noise floor&#10; </short>
          <long>&#10; Return current estimated noise floor&#10; @return Noise floor value&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="settled" ref="0x2b536e311900" loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; </short>
          <long>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; @return TRUE if noise floor estimate considered stable, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="adjust" ref="0x2b536e303a20" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="36:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Adjust noise floor based on new noise measurement&#10; </short>
          <long>&#10; Adjust noise floor based on new noise measurement&#10; @param data noise measurement&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b536e3037b0" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b536e3129c0" loc="42:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b536e3129c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b536e320328" loc="125:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="121:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b536e325e68" loc="72:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="69:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2b536e322ad8" loc="103:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="89:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b536e322540" loc="103:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b536e322858" loc="103:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2b536e323da8" loc="87:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="83:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2b536e31e290" loc="140:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="135:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2b536e320a48" loc="133:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="127:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b536e323610" loc="81:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2b536e3264d8" loc="53:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b536e326268" loc="53:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2b536e3219e0" loc="118:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="105:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b536e321448" loc="118:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b536e321760" loc="118:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2b536e325020" loc="62:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b536e326ca8" loc="62:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b536e3257c8" loc="67:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="64:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Control" loc="34:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
      <documentation loc="29:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <short>&#10; CC1000 internal radio control interface.</short>
        <long>&#10; CC1000 internal radio control interface.&#10; @author Philip Buonadonna&#10; @aythor Jaein Jeong&#10;</long>
      </documentation>
      <function command="" provided="0" name="tunePreset" ref="0x2b536e31c0a8" loc="49:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.</short>
          <long>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.  Calling Tune will allso reset the rfpower and LockVal&#10; selections to the table values.&#10; &#10; @param freq The index into the CC1K_Params table that holds the&#10; desired preset frequency parameters.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="freq" ref="0x2b536e30edb0" loc="49:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="biasOn" ref="0x2b536e3181d8" loc="93:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="87:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the bias power on.</short>
          <long>&#10; Turn the bias power on. This function must be followed by a call to&#10; either rxMode() or txMode() to place the radio in a recieve/transmit&#10; state respectively. There is approximately a 200us delay when&#10; restoring bias power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRFPower" ref="0x2b536e316448" loc="110:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="105:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the present RF power index.</short>
          <long>&#10; Get the present RF power index.&#10;&#10; @return The power index value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tuneManual" ref="0x2b536e31cba8" loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="51:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to a given frequency.</short>
          <long>&#10; Tune the radio to a given frequency. Since the CC1000 uses a digital&#10; frequency synthesizer, it cannot tune to just an arbitrary frequency.&#10; This routine will determine the closest achievable channel, compute&#10; the necessary parameters and tune the radio.&#10; &#10; @param The desired channel frequency, in Hz.&#10; &#10; @return The actual computed channel frequency, in Hz.  A return value&#10; of '0' indicates that no frequency was computed and the radio was not&#10; tuned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="DesiredFreq" ref="0x2b536e31c938" loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="selectLock" ref="0x2b536e316dc0" loc="118:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="112:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.</short>
          <long> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.  See&#10; the CC1000 data sheet for the available signals.&#10; &#10; @param LockVal The index of the signal to monitor at the CHP_OUT pin&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="LockVal" ref="0x2b536e316b50" loc="118:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x2b536e30e6d0" loc="39:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="36:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Initialise the radio to its default state.</short>
          <long>&#10; Initialise the radio to its default state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLock" ref="0x2b536e315628" loc="126:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="120:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the binary value from the CHP_OUT pin.</short>
          <long>&#10; Get the binary value from the CHP_OUT pin.  Analog signals cannot be&#10; read using function.&#10;&#10; @return 1 - Pin is high or 0 - Pin is low&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="coreOn" ref="0x2b536e3199a0" loc="85:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.</short>
          <long>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.  This will result in approximately a 750&#10; uA power savings.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x2b536e31ab38" loc="73:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="70:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio into transmit mode.</short>
          <long>&#10; Shift the CC1000 Radio into transmit mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOStatus" ref="0x2b536e315dc0" loc="136:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="128:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.</short>
          <long>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.  This information is used to determine if the data&#10; from the CC1000 needs to be inverted or not.&#10;&#10; @return TRUE if high-side LO injection is being used (i.e. data does NOT need to be inverted&#10; at the receiver.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x2b536e319290" loc="78:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="75:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio in receive mode.</short>
          <long>&#10; Shift the CC1000 Radio in receive mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x2b536e31a470" loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="65:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the CC1000 off&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRFPower" ref="0x2b536e318bd8" loc="103:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="95:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Set the transmit RF power value.</short>
          <long>&#10; Set the transmit RF power value.  The input value is simply an&#10; arbitrary index that is programmed into the CC1000 registers.  Consult&#10; the CC1000 datasheet for the resulting power output/current&#10; consumption values.&#10;&#10; @param power A power index between 1 and 255.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="power" ref="0x2b536e318968" loc="103:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
      <documentation loc="51:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2b536e30f1d8" loc="74:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b536e30f978" loc="84:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
        <documentation loc="76:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ByteRadio" loc="19:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <short>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission).</short>
        <long>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). This interface specifies the interaction between these&#10; two components.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function event="" provided="0" name="rts" ref="0x2b536e30d858" loc="25:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="21:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive wants to send a packet.</short>
          <long>&#10; SendReceive wants to send a packet.&#10; @param msg Message to be sent.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2b536e30d5e8" loc="25:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
                <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="listen" ref="0x2b536e309970" loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Enable listening for incoming packets.</short>
          <long>&#10; Enable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="syncing" ref="0x2b536e306328" loc="85:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="76:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Detect if SendReceive is attempting to sync with an incoming packet.</short>
          <long>&#10; Detect if SendReceive is attempting to sync with an incoming packet.&#10; During sync, idleByte events are not signaled. If sync is successful,&#10; an rx() event will be signaled, if it fails, idleByte events will&#10; resume. If syncing() returns TRUE, the last idleByte() event must&#10; have had preamble = TRUE.&#10;&#10; @return TRUE if a sync attempt is in progress, FALSE if not.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x2b536e305290" loc="95:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="92:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Message reception is complete.</short>
          <long>&#10; Message reception is complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPreambleLength" ref="0x2b536e309258" loc="56:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Get message preamble length.</short>
          <long>&#10; Get message preamble length.&#10; @return Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="idleByte" ref="0x2b536e307a60" loc="74:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.</short>
          <long>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.&#10; @param preamble TRUE if a message preamble byte has been received&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="preamble" ref="0x2b536e3077f0" loc="74:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cts" ref="0x2b536e30b020" loc="32:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Access to the media granted.</short>
          <long>&#10; Access to the media granted. Start sending. SendReceive must signal&#10; sendDone when transmission is complete. Note: the media-access-contro&#10; layer must have enabled listening before calling cts().&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPreambleLength" ref="0x2b536e30aa38" loc="50:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Set message preamble length.</short>
          <long>&#10; Set message preamble length.&#10; @param bytes Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bytes" ref="0x2b536e30a7c8" loc="50:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2b536e30a070" loc="44:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Transmission complete.</short>
          <long>&#10; Transmission complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x2b536e3070d8" loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Disable listening for incoming packets.</short>
          <long>&#10; Disable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTxMessage" ref="0x2b536e30b890" loc="39:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="34:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.</short>
          <long>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.&#10; @return Message being transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2b536e22e118"/>
              <typename><typedef-ref name="message_t" ref="0x2b536e22d678"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rx" ref="0x2b536e306b68" loc="90:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="87:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; A message is being received&#10;</short>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
      <documentation loc="53:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2007/04/15 20:05:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b536e495110" loc="110:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x2b536e4961d8" loc="87:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x2b536e498888" loc="78:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b536e496960" loc="92:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="89:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b536e495af8" loc="118:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="112:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="44:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x2b536e542020" loc="55:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="51:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x2b536e5436f8" loc="49:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b536e522998" loc="49:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b536e522998"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b536e53d258" loc="55:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b536e53c020" loc="63:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b536e522998"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b536e53d968" loc="63:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b536e53dc68" loc="63:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b536e522998"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b536e54e768" loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="70:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b536e54fa60" loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b536e54fdb8" loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b536e54e178" loc="92:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b536e54e4c8" loc="92:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b536e54b3f0" loc="110:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b536e54c368" loc="110:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b536e54c688" loc="110:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x2b536e54c9c0" loc="110:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x2b536e54cd70" loc="111:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x2b536e54b140" loc="111:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b536e552020" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b536e553250" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b536e5535a8" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b536e553910" loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b536e553c60" loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b536e551898" loc="82:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="74:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b536e551020" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="64:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b536e552a28" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b536e552d48" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x2b536e55d020" loc="105:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="102:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x2b536e565020" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b536df3d300"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x2b536df3d7b8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x2b536e55b290" loc="131:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="126:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b536e55b020" loc="131:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x2b536e55d860" loc="113:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="109:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x2b536e563b98" loc="73:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="70:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x2b536e5659f8" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b536df3d300"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b536df3d7b8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x2b536e565788" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b536df3d300"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b536df3d7b8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x2b536e561a68" loc="82:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x2b536e55c7b8" loc="124:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="119:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b536e55ba28" loc="141:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="133:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x2b536e561328" loc="77:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="74:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x2b536e5608f8" loc="90:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="87:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x2b536e5601d8" loc="86:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x2b536e55f070" loc="97:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x2b536e55c020" loc="118:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="114:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x2b536e564c48" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="56:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b536df43cd8"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b536df42438"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x2b536e5649d8" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b536df43cd8"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b536df42438"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x2b536e55f828" loc="101:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="98:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x2b536e564258" loc="55:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="51:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b536df43cd8"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b536df42438"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x2b536e563438" loc="66:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b536e55a588" loc="147:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="143:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b536e55a318" loc="147:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b536d6ea378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="65:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="51:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2b536e548c28" loc="74:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b536e544448" loc="84:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="76:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="36:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.4 $&#10; @date $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x2b536e5c29a8" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
        <documentation loc="37:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b536e5e52a8" loc="51:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007/02/04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b536e5e3840" loc="56:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x2b536e5e2838" loc="73:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b536e5e3020" loc="46:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b536e5e2070" loc="65:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b536e5e1178" loc="81:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="72:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="59:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x2b536e5e6e40" loc="80:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="73:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x2b536e5de650" loc="88:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="82:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="35:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x2b536e5d5ac8" loc="69:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="62:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a cleint id&#10;&#10; </short>
          <long>&#10; Enqueue a cleint id&#10;&#10; @param cleintId - the cleint id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b536e5db020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b536e5d5858" loc="69:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b536e5db020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x2b536e5daae8" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="37:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x2b536e5d65e8" loc="52:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b536e5db020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b536e5d6378" loc="52:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b536e5db020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x2b536e5d5020" loc="60:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="54:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the cleint id of the next resource in the queue.</short>
          <long>&#10; Retreive the cleint id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The cleint id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x2b536e5db020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x2b536e5feaf8" loc="50:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="47:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x2b536e5fd258" loc="56:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x2b536e5fd9c8" loc="61:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x2b536e5fb848" loc="72:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x2b536e620e70" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="85:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b536e61f630" loc="106:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="92:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x2b536e5fb110" loc="66:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="63:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b536e61d290" loc="123:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="109:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b536e61d020" loc="123:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x2b536e5fe3e0" loc="45:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="42:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x2b536e620020" loc="78:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="75:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x2b536e620738" loc="83:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="45:/opt/tinyos-2.0.2/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x2b536e64fc18" loc="52:/opt/tinyos-2.0.2/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="42:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x2b536e6d2868" loc="42:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x2b536e6d2868"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x2b536e6cf338" loc="53:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
        <documentation loc="44:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b536dedca98"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x2b536e6d2868"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x2b536e6cf0c8" loc="53:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x2b536e6d2868"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b536e6f57d0" loc="42:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b536e6f57d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2b536e6f20d8" loc="50:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b536d6eadb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b536e70de00" loc="46:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b536e70de00"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b536e70a068" loc="46:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e70a068"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2b536e70a900" loc="53:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e70a068"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x2b536e709968" loc="65:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <documentation loc="62:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x2b536e709178" loc="60:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2b536e7080d8" loc="71:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b536e6eeac0" loc="45:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b536e6eeac0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b536e6eecf0" loc="45:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b536e7117a0" loc="98:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b536e6ea770" loc="67:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x2b536e713d70" loc="92:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b536e7137d0" loc="92:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
          </variable>
          <variable name="dt" ref="0x2b536e713af0" loc="92:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b536e713020" loc="77:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x2b536e710020" loc="105:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b536e6eb810" loc="55:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b536e6eb5a0" loc="55:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e6eecf0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b536e6ea020" loc="62:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x2b536e734110" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df51450"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b536df51858"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x2b536e7324c0" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df5f848"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b536df5fc50"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x2b536e733328" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df55128"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b536df55530"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x2b536e733ce0" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df55128"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b536df55530"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x2b536e733a70" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df55128"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b536df55530"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x2b536e732e78" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df5f848"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b536df5fc50"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x2b536e732c08" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df5f848"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b536df5fc50"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x2b536e734ae0" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df51450"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b536df51858"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x2b536e734870" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df51450"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b536df51858"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x2b536e74fc30" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x2b536e74e450" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x2b536e74f528" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x2b536e74ec00" loc="50:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x2b536e750378" loc="21:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df599b8"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x2b536df59dc0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x2b536e750d28" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df599b8"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2b536df59dc0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b536e750ab8" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b536df599b8"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2b536df59dc0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x2b536e7365b8" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e7365b8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x2b536e72cc50" loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b536e72d020" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b536e736e70" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e7365b8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2b536e72d728" loc="53:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2b536e72a3e0" loc="71:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b536e72e7e0" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e7365b8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2b536e72e570" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b536e7365b8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b536e72de20" loc="56:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b536e72c538" loc="59:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x2b536e71a870" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b536e71a870"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x2b536e73c020" loc="89:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x2b536e73d020" loc="78:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b536e717178" loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b536e71a870"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x2b536e73c970" loc="95:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b536e73c700" loc="95:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x2b536e73b178" loc="101:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b536d6e8910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2b536e716978" loc="66:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2b536e716258" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2b536e73d778" loc="84:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b536ded2448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b536e717ab0" loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b536e71a870"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2b536e717840" loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b536e71a870"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b536e7140d8" loc="69:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b536e7147c0" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="36:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="32:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x2b536e8a2c30" loc="48:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x2b536e8a1ad0" loc="58:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x2b536e8a13e0" loc="53:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="50:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x2b536e214888"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x2b536e8a2450" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="38:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2b536e214888"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x2b536e8a7e50" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2b536e214888"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x2b536e8a21d0" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2b536e214c40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
